;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INGEST_PARASOL_PRODUCT       
;* 
;* PURPOSE:
;*      INGESTS PARASOL L1B DATA INTO DIMITRI DATABASE. MULTIPLE PRODUCT 
;*	    EXTRACTION IS AVAILABLE BUT IT EXPECTS ALL FILES TO BE THE SAME REGION/PROCESSING. 
;*      OUTPUTS QUICKLOOK IMAGES, UPDATES DATABASE AND APPENDS DATA TO SAV FILE FOR 
;*      SPECIFIED REGION AND PROCESSING.
;* 
;* CALLING SEQUENCE:
;*      RES = INGEST_PARASOL_PRODUCT(IFILES)      
;* 
;* INPUTS:
;*      IFILES -  A STRING OR STRING ARRAY OF THE FULL PATH FILENAMES OF PRODUCTS 
;*                FOR INGESTION.      
;*
;* KEYWORDS:
;*      INPUT_FOLDER      - A STRING CONTAINING THE FULL PATH OF THE 'INPUT' FOLDER, IF 
;*                          NOT PROVIDED THEN IT IS DERIVED FROM THE FILENAME
;*      ICOORDS           - A FOUR ELEMENT FLOATING-POINT ARRAY CONTAINING THE NORTH, SOUTH, 
;*                          EAST AND WEST COORDINATES OF THE ROI, E.G [50.,45.,10.,0.]
;*      NB_PIX_THRESHOLD  - NUMBER OF PIXELS WITHIN ROI TO BE ACCEPTED
;*      ENDIAN_SZE        - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG), IF NOT PROVIDED 
;*                          THEN COMPUTED.
;*      COLOUR_TABLE      - USER DEFINED IDL COLOUR TABLE INDEX (DEFAULT IS 39)
;*      PLOT_XSIZE        - WIDTH OF GENERATED PLOTS (DEFAULT IS 700PX)
;*      PLOT_YSIZE        - HEIGHT OF GENERATED PLOTS (DEFAULT IS 400PX)
;*      NO_ZBUFF          - IF SET THEN PLOTS ARE GENERATED IN WINDOWS AND NOT 
;*                          WIHTIN THE Z-BUFFER.
;*      NO_QUICKLOOK      - IF SET THEN QUICKLOOKS ARE NOT GENERATED FOR IFILES.
;*      VERBOSE           - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        04 JUL 2005 - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*        16 DEC 2010 - C KENT    - DIMITRI-2 V1.0
;*        20 DEC 2010 - C KENT    - UPDATED COMMENTS AND HEADER INFORMATION
;*        10 JAN 2011 - C KENT    - CHANGED SAVED OUTPUT VARIABLE TO SENSOR_L1B_REF 
;*        21 MAR 2011 - C KENT    - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*        22 MAR 2011 - C KENT    - ADDED CONFIGURAITON FILE DEPENDENCE
;*        14 MAY 2011 - C KENT    - ADDED GLOBCARBON CLOUD SCREENING
;*        21 JUN 2011 - C KENT    - UPDATED RAA HANDLING
;*        01 JUL 2011 - C KENT    - ADDED ANGLE CORRECTOR
;*        04 JUL 2011 - C KENT    - ADDED AUX INFO TO OUTPUT SAV
;*        14 JUL 2011 - C KENT    - UPDATED TIME EXTRACTION SECTION
;*        14 SEP 2011 - C KENT    - ADDED NETCDF OUTPUT STRUCTURE
;*        08 MAR 2012 - C KENT    - ADDED ROI COVERAGE
;*
;* VALIDATION HISTORY:
;*        16 DEC 2010 - C KENT    - WINDOWS 32BIT MACHINE, COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        12 APR 2011 - C KENT    - LINUX 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INGEST_PARASOL_PRODUCT,IFILES,INPUT_FOLDER=INPUT_FOLDER,ICOORDS=ICOORDS,$
         ENDIAN_SZE=ENDIAN_SIZE,COLOUR_TABLE=COLOUR_TABLE,$
         PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,NO_ZBUFF=NO_ZBUFF,NO_QUICKLOOK=NO_QUICKLOOK,$
         VERBOSE=VERBOSE

;------------------------
; KEYWORD PARAMETER CHECK - NOTE, ASSUMES ALL PRODUCT ARE RELATED TO THE SAME REGION/PROCESSING

  IF STRCMP(STRING(IFILES[0]),'') THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  
  IF N_ELEMENTS(INPUT_FOLDER) EQ 0 THEN INPUT_FOLDER = GET_DIMITRI_LOCATION('INPUT')

  DELIM = GET_DIMITRI_LOCATION('DL')
  TEMP = STRSPLIT(IFILES[0],DELIM,/EXTRACT)
  
  TEMP_INF  = WHERE(STRCMP(TEMP,'Input') EQ 1)
  TEMP_INF  = TEMP_INF(N_ELEMENTS(TEMP_INF)-1)
  IREGION   = TEMP[TEMP_INF+1]
  IREGION   = STRMID(IREGION,5,STRLEN(IREGION)) 
  SENSOR    = TEMP[TEMP_INF+2]
  IPROC     = TEMP[TEMP_INF+3]
  IPROC     = STRMID(IPROC,5,STRLEN(IPROC)) 
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()
  PAR_SITE_TYPE = GET_SITE_TYPE(IREGION,VERBOSE=VERBOSE) 

  IF N_ELEMENTS(ICOORDS) EQ 0 THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: NO ROI COORDINATES PROVIDED, USING DEFAULT OF [90.,-90,180.0,-180.0]'
    ICOORDS = [90.,-90.,180.0,-180.0]
  ENDIF
  IF N_ELEMENTS(COLOUR_TABLE) EQ 0 THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: NO COLOR_TABLE SET, USING DEFAULT OF 39'
    COLOUR_TABLE = CFIG_DATA.(1)[2]
  ENDIF
  IF N_ELEMENTS(PLOT_XSIZE) EQ 0 THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: PLOT_XSIZE NOT SET, USING DEFAULT OF 700'
    PLOT_XSIZE = CFIG_DATA.(1)[0]
  ENDIF
  IF N_ELEMENTS(PLOT_YSIZE) EQ 0 THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: PLOT_YSIZE NOT SET, USING DEFAULT OF 400'
    PLOT_YSIZE = CFIG_DATA.(1)[1]
  ENDIF  

;------------------------------------------------
; IF ENDIAN SIZE NOT PROVIDED THEN GET VALUE

   IF N_ELEMENTS(ENDIAN_SIZE) EQ 0 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: NO ENDIAN SIZE PROVIDED, RETRIEVING...'
    ENDIAN_SIZE = GET_ENDIAN_SIZE(VERBOSE=VERBOSE)
  ENDIF

;------------------------
; DEFINE OUTPUT

  OUTPUT_SAV = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+SENSOR+'_TOA_REF.dat')
  NCDF_FILENAME = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+IREGION+'_'+SENSOR+'_Proc_'+IPROC+'.nc')

;------------------------
; GET NUMBER OF IFILES 

  NB_FILES = N_ELEMENTS(IFILES)

;-----------------------------------------------
; GET THE DATABASE STRUCTURE

  DB_DATA = GET_DIMITRI_TEMPLATE(NB_FILES,/DB)
  
;-----------------------------------------------  
; ADD DATA OF INGESTION TO DB_DATA

  TEMP = SYSTIME()
  TEMP = STRMATCH(STRMID(TEMP,8,1),' ') ? '0'+STRUPCASE(STRING(STRMID(TEMP,9,1)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4))) : STRUPCASE(STRING( STRMID(TEMP,8,2)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4)))
  DB_DATA.DIMITRI_DATE = TEMP 

;-----------------------------------------------
; ADD REGION, SENSOR AND PROC VERSION TO DB_DATA

  DB_DATA.REGION = IREGION
  DB_DATA.SENSOR = SENSOR
  DB_DATA.PROCESSING_VERSION = IPROC
 
;----------------------------------
; DEFINE SPECIFIC PARAMETERS 

  NB_BANDS = 9
  NB_DIR = 16 
  BAND_INDEX =[0,1,3,4,5,6,7,8,2]
  BAND_OFFSET = 11
  NB_DIRECTIONS = NB_DIR

;----------------------------------
; DEFINE THE STATISTICAL ARRAYS

  BADVAL = -999.0
	ROI_AVG_TOA_REF  = FLTARR(NB_BANDS,NB_FILES*NB_DIR)
	ROI_STD_TOA_REF  = FLTARR(NB_BANDS,NB_FILES*NB_DIR)
	NB_ROI_PX        = FLTARR(NB_FILES*NB_DIR)
	GOOD_RECORD      = MAKE_ARRAY(NB_FILES*NB_DIR,/INTEGER,VALUE=0)
	IFILE_DATE 	     = DBLARR(5,NB_FILES*NB_DIR);CONTAINS YEAR,MONTH,DAY,DOY,DECIMEL_YEAR
	IFILE_VIEW 	     = DBLARR(4,NB_FILES*NB_DIR);CONTAINS SENSOR ZENITH,SENSOR AZIMUTH,SOLAR ZENITH,SOLAR AZIMUTH
  IFILE_AUX        = FLTARR(12,NB_FILES*NB_DIR);CONTAINS OZONE,PRESSURE,RELHUMIDITY,WIND_ZONAL,WIND_MERID, AND WVAP (MU AND SIGMA)

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'PARASOL L1B INGEST: DEFINITION OF OUTPUT ARRAYS:'
    HELP, ROI_AVG_TOA_REF,ROI_STD_TOA_REF,NB_ROI_PX,GOOD_RECORD,IFILE_DATE,IFILE_VIEW
  ENDIF

;---------------------------------
; ADD DATA TO NETCDF OUTPUT STRUCTURE

  NCDF_OUT = GET_DIMITRI_EXTRACT_NCDF_DATA_STRUCTURE(NB_FILES,NB_BANDS,NB_DIRECTIONS)
  NCDF_OUT.ATT_FNAME  = 'Site_'+IREGION+'_'+SENSOR+'_'+'Proc_'+IPROC+'.nc'
  NCDF_OUT.ATT_TOOL   = GET_DIMITRI_LOCATION('TOOL')
  NCDF_OUT.ATT_SENSOR = SENSOR
  NCDF_OUT.ATT_PROCV  = IPROC
  NCDF_OUT.ATT_PRES   = STRTRIM(STRING(SENSOR_PIXEL_SIZE(SENSOR)),2)+' KM'
  NCDF_OUT.ATT_NBANDS = STRTRIM(STRING(NB_BANDS),2)
  NCDF_OUT.ATT_NDIRS  = STRTRIM(STRING(NB_DIRECTIONS),2)
  NCDF_OUT.ATT_SITEN  = IREGION
  NCDF_OUT.ATT_SITEC  = STRJOIN(STRTRIM(STRING(ICOORDS),2),' ')
  NCDF_OUT.ATT_SITET  = PAR_SITE_TYPE
 
;----------------------------------
; START MAIN LOOP OVER EACH IFILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: STARTING INGESTION LOOP ON PARASOL PRODUCTS'
	FOR IN_FNAME=0,NB_FILES-1 DO BEGIN; IN_FNAME IS RESERVED FOR LOOPS WITHIN THE INGESTION ROUTINES

    TEMP = STRSPLIT(IFILES[IN_FNAME],DELIM,/EXTRACT)
    DB_DATA.FILENAME[IN_FNAME] = TEMP[N_ELEMENTS(TEMP)-1] 

;------------------------------------------
; GENERATE AN RGB QUICKLOOK WITH THE ROI OVERLAID
  
    IF N_ELEMENTS(NO_QUICKLOOK) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: GENERATE QUICKLLOK OF PRODUCT'
      IF FIX(CFIG_DATA.(1)[3]) EQ 1 THEN QL_STATUS =  GET_PARASOL_QUICKLOOK(IFILES[IN_FNAME],/ROI,/RGB,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,VERBOSE=VERBOSE) $
          ELSE QL_STATUS =  GET_PARASOL_QUICKLOOK(IFILES[IN_FNAME],/ROI,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,VERBOSE=VERBOSE)

      IF KEYWORD_SET(VERBOSE) THEN IF QL_STATUS EQ -1 THEN PRINT, 'PARASOL L1B INGEST: QUICKLOOK GENERATION FAILED - ',IFILES[IN_FNAME] $
        ELSE PRINT, 'PARASOL L1B INGEST: QUICKLOOK GENERATION SUCCESS' 
    ENDIF    

;------------------------------------------
; RETRIEVE PRODUCT DATA

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: RETRIEVING HEADER AND L1B DATA'
    L1B_HEADER = GET_PARASOL_L1B_HEADER(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    L1B_DATA = GET_PARASOL_L1B_DATA(IFILES[IN_FNAME],ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)

;------------------------------------------
; RETRIEVE AUX DATA FILENAMES FOR DB_DATA
  
    TEMP = 'NONE'
    DB_DATA.AUX_DATA_1[IN_FNAME] = L1B_HEADER.SOFTWARE_VERSION
    DB_DATA.AUX_DATA_2[IN_FNAME] = L1B_HEADER.DEM_MODEL 
    DB_DATA.AUX_DATA_3[IN_FNAME] = L1B_HEADER.RAD_DATE 
    DB_DATA.AUX_DATA_4[IN_FNAME] = L1B_HEADER.GEO_DATE 
    DB_DATA.AUX_DATA_5[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_6[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_7[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_8[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_9[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_10[IN_FNAME] = TEMP 
        
;----------------------------------
; RETRIEVE DATE INFORMATION --MOVE TO EACH DIRECTION; SET DATE/TIME AS FIRST SEQUENCE 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: RETRIEVING DATE INFORMATION'

    TMP_INDEX = WHERE($
            L1B_DATA.LATITUDE LE ICOORDS[0] AND $
            L1B_DATA.LATITUDE GE ICOORDS[1] AND $
            L1B_DATA.LONGITUDE LE ICOORDS[2] AND $
            L1B_DATA.LONGITUDE GE ICOORDS[3] , $
            TP_PIX $
            )

    IF TP_PIX GT 5 THEN TDATE = L1B_HEADER.SEQ_DATE[(L1B_DATA[TMP_INDEX[N_ELEMENTS(TMP_INDEX)-1]].SEQ_NUMBER[0]-1)>1,4] $
    ELSE TDATE = '00000000000000'
    IF FIX(STRMID(TDATE,0,4)) LE 2000 THEN TDATE = L1B_HEADER.DATE

    IFILE_DATE[0,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]  = STRMID(TDATE,0,4)
    IFILE_DATE[1,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]  = STRMID(TDATE,4,2)
    IFILE_DATE[2,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]  = STRMID(TDATE,6,2)
    
    IF FLOAT(IFILE_DATE[0,NB_DIR*IN_FNAME]) MOD 4 EQ 0 THEN DIY = 366.0 ELSE DIY = 365.0
    THR = STRMID(TDATE,8,2)+0.
    TMM = STRMID(TDATE,10,2)+0.
    
    TSS = STRMID(TDATE,12,2)+0.
    TTIME = DOUBLE((THR/(DIY*24.))+(TMM/(DIY*60.*24.))+TSS/(DIY*60.*60.*24.))
    DATED = STRMID(TDATE,0,4)+STRMID(TDATE,4,2)+STRMID(TDATE,6,2)+' '+STRMID(TDATE,8,2)+':'+STRMID(TDATE,10,2)+':'+STRMID(TDATE,12,2) 
        
;    IFILE_DATE[0,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]	= STRMID(L1B_HEADER.DATE,0,4)
;    IFILE_DATE[1,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]	= STRMID(L1B_HEADER.DATE,4,2)
;    IFILE_DATE[2,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1]	= STRMID(L1B_HEADER.DATE,6,2)
;    
;    IF FLOAT(IFILE_DATE[0,NB_DIR*IN_FNAME]) MOD 4 EQ 0 THEN DIY = 366.0 ELSE DIY = 365.0
;    THR = STRMID(L1B_HEADER.DATE,8,2)+0.
;    TMM = STRMID(L1B_HEADER.DATE,10,2)+0.
;    TSS = STRMID(L1B_HEADER.DATE,12,2)+0.
;    TTIME = DOUBLE((THR/(DIY*24.))+(TMM/(DIY*60.*24.))+TSS/(DIY*60.*60.*24.))
    
    IFILE_DATE[3,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1] =  JULDAY(IFILE_DATE[1,NB_DIR*IN_FNAME],$
                                                              IFILE_DATE[2,NB_DIR*IN_FNAME],$
                                                              IFILE_DATE[0,NB_DIR*IN_FNAME])-$
                                                              JULDAY(1,0,IFILE_DATE[0,NB_DIR*IN_FNAME])

    IFILE_DATE[4,NB_DIR*IN_FNAME:NB_DIR*IN_FNAME+NB_DIR-1] =  FLOAT(IFILE_DATE[0,NB_DIR*IN_FNAME])+$
                                                              DOUBLE(IFILE_DATE[3,NB_DIR*IN_FNAME]/DIY)+$
                                                              TTIME

;----------------------------------
; ADD DATE INFORMATION TO DB_DATA

    DB_DATA.YEAR[IN_FNAME]   = IFILE_DATE[0,NB_DIR*IN_FNAME]
    DB_DATA.MONTH[IN_FNAME]  = IFILE_DATE[1,NB_DIR*IN_FNAME]
    DB_DATA.DAY[IN_FNAME]    = IFILE_DATE[2,NB_DIR*IN_FNAME]
    DB_DATA.DOY[IN_FNAME]    = IFILE_DATE[3,NB_DIR*IN_FNAME]
    DB_DATA.DECIMAL_YEAR[IN_FNAME] = IFILE_DATE[4,NB_DIR*IN_FNAME]

;-----------------------------------------
; SET INITIAL VALUES OF CLOUD SCREENING

    DB_DATA.AUTO_CS[IN_FNAME] = -1
    DB_DATA.MANUAL_CS[IN_FNAME] = -1

;-----------------------------------------
; STORE DATE IN NETCDF STRUCTURE

    NCDF_OUT.VAR_PNAME[IN_FNAME]  = DB_DATA.FILENAME[IN_FNAME] 
    NCDF_OUT.VAR_PTIME[IN_FNAME]  = DATED
    NCDF_OUT.VAR_DTIME[IN_FNAME]  = DB_DATA.DECIMAL_YEAR[IN_FNAME]

;----------------------------------
; LOOP OVER EACH DIRECTION

    TEMP_PIX = -1
    TEMP_AUTO_CS = DOUBLE(-1.0) 
    FOR IN_DIR = 0,NB_DIR-1 DO BEGIN

;------------------------------------------
; RETRIEVE INDEX OF NOMINAL DATA WITHIN ROI

      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: RETRIEVING INDEX OF PIXELS WITHIN ROI'
        ROI_INDEX = WHERE($
            L1B_DATA.LATITUDE LE ICOORDS[0] AND $
            L1B_DATA.LATITUDE GE ICOORDS[1] AND $
            L1B_DATA.LONGITUDE LE ICOORDS[2] AND $
            L1B_DATA.LONGITUDE GE ICOORDS[3] AND $
            L1B_DATA.REF_443NP[IN_DIR] GT 0.0 , $
            NB_PIX $
            )

       IF NB_PIX GT TEMP_PIX THEN TEMP_PIX = NB_PIX 
       DB_DATA.NUM_ROI_PX[IN_FNAME] = TEMP_PIX 
       IF TEMP_PIX LT 1 THEN DB_DATA.NUM_ROI_PX[IN_FNAME] = -1

;-----------------------------------------
; IF NO PIXELS IN ROI THEN DO NOT RETRIEVE 
; TOA REFLECTANCE
 
      IF ROI_INDEX[0] EQ -1 THEN BEGIN
        IFILE_VIEW[*,NB_DIR*IN_FNAME+IN_DIR]= BADVAL
        IFILE_AUX[*,NB_DIR*IN_FNAME+IN_DIR] = BADVAL
        ROI_AVG_TOA_REF(*,NB_DIR*IN_FNAME+IN_DIR) = BADVAL
        ROI_STD_TOA_REF(*,NB_DIR*IN_FNAME+IN_DIR) = BADVAL
        GOTO, NO_ROI
      ENDIF

;-----------------------------------------
; CHECK ROI COVERAGE

    IF DB_DATA.NUM_ROI_PX[IN_FNAME] GT 0 THEN BEGIN
      TROI = CHECK_ROI_COVERAGE(L1B_DATA.LATITUDE,L1B_DATA.LONGITUDE,ROI_INDEX,ICOORDS,VERBOSE=VERBOSE)
      IF TROI GT DB_DATA.ROI_COVER[IN_FNAME] THEN DB_DATA.ROI_COVER[IN_FNAME]=TROI
    ENDIF

;------------------------------------------
; DEFINE ARRAY TO HOLD CS RHO

    CS_GEO = MAKE_ARRAY(NB_PIX,4,/FLOAT)
    CS_RHO = FLTARR(NB_PIX,NB_BANDS)

;------------------------------------------
; RETRIEVE VIEWING GEOMETRIES

    TEMP_VAA = L1B_DATA.SAA-L1B_DATA.RAA[IN_DIR]  
    TEMP_ANGLES = DIMITRI_ANGLE_CORRECTOR(L1B_DATA.VZA[IN_DIR],TEMP_VAA,L1B_DATA.SZA[IN_DIR],L1B_DATA.SAA)
      TEMP_SZA = TEMP_ANGLES.SZA
      IFILE_VIEW[2,NB_DIR*IN_FNAME+IN_DIR]=MEAN(TEMP_SZA[ROI_INDEX])
        CS_GEO[*,0] =TEMP_SZA[ROI_INDEX]
      TEMP = TEMP_ANGLES.SAA
        IFILE_VIEW[3,NB_DIR*IN_FNAME+IN_DIR]=MEAN(TEMP(ROI_INDEX))
        CS_GEO[*,2] =TEMP(ROI_INDEX)
      TEMP = TEMP_ANGLES.VZA
        IFILE_VIEW[0,NB_DIR*IN_FNAME+IN_DIR]=MEAN(TEMP(ROI_INDEX))
        CS_GEO[*,1] = TEMP(ROI_INDEX)
      TEMP = TEMP_ANGLES.VAA
        IFILE_VIEW[1,NB_DIR*IN_FNAME+IN_DIR]=MEAN(TEMP(ROI_INDEX))
        CS_GEO[*,3] = TEMP(ROI_INDEX)
      TEMP=0    

;----------------------------------------
; SET AUX INFORMATION AS MISSING

      IFILE_AUX[*,NB_DIR*IN_FNAME+IN_DIR] = BADVAL

;-----------------------------------------
; STORE DATA IN NETCDF STRUCTURE

      NCDF_OUT.VAR_VZA[IN_DIR,IN_FNAME]      = IFILE_VIEW[0,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_VAA[IN_DIR,IN_FNAME]      = IFILE_VIEW[1,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_SZA[IN_DIR,IN_FNAME]      = IFILE_VIEW[2,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_SAA[IN_DIR,IN_FNAME]      = IFILE_VIEW[3,NB_DIR*IN_FNAME+IN_DIR]
      
      NCDF_OUT.VAR_OZONEMU[IN_FNAME]  = IFILE_AUX[0,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_OZONESD[IN_FNAME]  = IFILE_AUX[1,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_PRESSMU[IN_FNAME]  = IFILE_AUX[2,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_PRESSSD[IN_FNAME]  = IFILE_AUX[3,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_RHUMMU[IN_FNAME]   = IFILE_AUX[4,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_RHUMSD[IN_FNAME]   = IFILE_AUX[5,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_ZONALMU[IN_FNAME]  = IFILE_AUX[6,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_ZONALSD[IN_FNAME]  = IFILE_AUX[7,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_MERIDMU[IN_FNAME]  = IFILE_AUX[8,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_MERIDSD[IN_FNAME]  = IFILE_AUX[9,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_WVAPMU[IN_FNAME]   = IFILE_AUX[10,NB_DIR*IN_FNAME+IN_DIR]
      NCDF_OUT.VAR_WVAPSD[IN_FNAME]   = IFILE_AUX[11,NB_DIR*IN_FNAME+IN_DIR]

;------------------------------------------
; LOOP OVER EACH BAND

      FOR IN_BAND=0,NB_BANDS-1 DO BEGIN

      IN_BAND_INDEX = BAND_INDEX[IN_BAND]+BAND_OFFSET
      TEMP_REF = L1B_DATA.(IN_BAND_INDEX)[IN_DIR]
      TEMP_REF = TEMP_REF/COS(TEMP_SZA*!DTOR)
      
      VALID = WHERE(TEMP_REF(ROI_INDEX) GT 0.0 AND TEMP_REF(ROI_INDEX) LT 5.0,COUNT)
      
      IF VALID[0] GT -1 THEN BEGIN
        CS_RHO[*,IN_BAND] = TEMP_REF(ROI_INDEX)
        ROI_AVG_TOA_REF(IN_BAND,NB_DIR*IN_FNAME+IN_DIR) = MEAN(TEMP_REF(ROI_INDEX[VALID]))
        ROI_STD_TOA_REF(IN_BAND,NB_DIR*IN_FNAME+IN_DIR) = STDDEV(TEMP_REF(ROI_INDEX[VALID]))

        NCDF_OUT.VAR_PIX[IN_BAND,IN_FNAME,IN_DIR]      = COUNT
        NCDF_OUT.VAR_RHOMU[IN_BAND,IN_FNAME,IN_DIR]    = MEAN(TEMP_REF(ROI_INDEX[VALID]))
        NCDF_OUT.VAR_RHOSD[IN_BAND,IN_FNAME,IN_DIR]    = STDDEV(TEMP_REF(ROI_INDEX[VALID]))
      ENDIF

      ENDFOR;END OF LOOP ON BANDS

      CS_PARASOL = DIMITRI_CLOUD_SCREENING(SENSOR,PAR_SITE_TYPE,CS_RHO,CS_GEO,'GLOBCARBON_P',VERBOSE=VERBOSE)
      IF CS_PARASOL[0] GT TEMP_AUTO_CS THEN TEMP_AUTO_CS = DOUBLE(CS_PARASOL[0])
      
    NO_ROI:
    ENDFOR ;END OF LOOP ON DIRECTIONS

    DB_DATA.AUTO_CS[IN_FNAME] = TEMP_AUTO_CS
    NCDF_OUT.VAR_CLOUD_AUT[IN_FNAME]  = TEMP_AUTO_CS
    NCDF_OUT.VAR_CLOUD_MAN[IN_FNAME]  = -1
    NCDF_OUT.VAR_ROI[IN_FNAME]        = DB_DATA.ROI_COVER[IN_FNAME]

	IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: END OF LOOP ON PRODUCT'
	ENDFOR; END OF FILE ANALYSIS

;------------------------------------
; AMEND/SAVE DATA TO SAV FILE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: DEFINING OUTPUT ARRAY'
  NUM_NON_REF = 5+12
  NB_COLS = NUM_NON_REF+2*(NB_BANDS)
  
	SENSOR_L1B_REF          = DBLARR(NB_COLS,NB_DIR*NB_FILES)
  SENSOR_L1B_REF[0,*]     = IFILE_DATE[4,*] ;UPDATED FROM DAY OF YEAR TO DECIMEL YEAR
  SENSOR_L1B_REF[1:4,*]   = IFILE_VIEW[*,*]
  SENSOR_L1B_REF[5:16,*]  = IFILE_AUX[*,*]
  SENSOR_L1B_REF[NUM_NON_REF:NUM_NON_REF+NB_BANDS-1,*]  = ROI_AVG_TOA_REF[*,*] 
  SENSOR_L1B_REF[NUM_NON_REF+NB_BANDS:NB_COLS-1,*] = ROI_STD_TOA_REF[*,*]  

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'PARASOL L1B INGEST: AMMENDING DATA TO OUTPUT SAV FILE'
	TEMP = FILE_INFO(OUTPUT_SAV)
	IF TEMP.EXISTS EQ 1 THEN BEGIN
	 TEMP_NEW = SENSOR_L1B_REF
     
   RESTORE,OUTPUT_SAV
   TEMP_OLD = SENSOR_L1B_REF
   RES_DIMS = SIZE(TEMP_OLD)
     
   SENSOR_L1B_REF = MAKE_ARRAY(NB_COLS,RES_DIMS[2]+NB_DIR*NB_FILES,/DOUBLE)
   SENSOR_L1B_REF[*,0:RES_DIMS[2]-1] = TEMP_OLD
   SENSOR_L1B_REF[*,RES_DIMS[2]:RES_DIMS[2]+NB_DIR*NB_FILES-1] = TEMP_NEW
 
	ENDIF
	
	RES = SORT(SENSOR_L1B_REF[0,*])
  SENSOR_L1B_REF = SENSOR_L1B_REF[*,RES]
	SAVE,SENSOR_L1B_REF,FILENAME=OUTPUT_SAV

;------------------------------------
; GENERATE PLOTS WITH NEW TIME SERIES DATA

  RES = GET_PARASOL_TIMESERIES_PLOTS(OUTPUT_SAV,COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,VERBOSE=VERBOSE) 
  
;------------------------------------
; SAVE DATA TO NETCDF FILE

  RES = DIMITRI_INTERFACE_EXTRACT_TOA_NCDF(NCDF_OUT,NCDF_FILENAME)    
    
;------------------------------------
; AMEND DATA TO DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: SENDING DATA TO UPDATE DATABASE'
  RES = UPDATE_DIMITRI_DATABASE(DB_DATA,/SORT_DB,VERBOSE=VERBOSE)
 
	RETURN,1 
END
