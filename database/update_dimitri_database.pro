;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      UPDATE_DIMITRI_DATABASE       
;* 
;* PURPOSE:
;*      APPENDS DATA TO THE DIMITRI DATABASE FILE
;* 
;* CALLING SEQUENCE:
;*      RES = UPDATE_DIMITRI_DATABASE(DB_DATA)      
;* 
;* INPUTS:
;*      DB_DATA = A DATABASE STRUCTURE TAKEN FROM GET_DIMITRI_TEMPLATE
;*
;* KEYWORDS:
;*      SORT_DB  - SET TO SORT THE DATABSE ONCE UPDATED
;*      VERBOSE  - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS   - 1: NOMINAL, (-1) OR 0: ERROR
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      01 DEC 2010 - C KENT   - DIMITRI-2 V1.0
;*      02 DEC 2010 - C KENT   - UPDATED HEADER INFORMATION AND SLIGHT CODE MODIFICATION 
;*      21 MAR 2011 - C KENT   - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*      09 MAR 2012 - C KENT   - ADDED ROI_COVER
;*
;* VALIDATION HISTORY:
;*      02 DEC 2010 - C KENT   - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION SUCCESSFUL, 
;*                               TESTED DURING VALIDATION OF INGEST_MERIS_PRODUCT WITH MULTIPLE PRODUCTS
;*      12 APR 2011 - C KENT   - LINUX 64-BIT IDL 8.0: NOMINAL COMPILATION AND OPERATION
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION UPDATE_DIMITRI_DATABASE,DB_DATA,SORT_DB=SORT_DB,VERBOSE=VERBOSE

;----------------------------------------
;GET DATABASE PARAMETERS

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: RETRIEVING NUMBER OF FILES,FORMAT,HEADER AND TEMPLATE'
  DB_ITER   = N_ELEMENTS(DB_DATA.(0))
  DB_FORMAT = GET_DIMITRI_TEMPLATE(1,/FORMAT,VERBOSE=VERBOSE)
  DB_HEADER = GET_DIMITRI_TEMPLATE(1,/HDR,VERBOSE=VERBOSE)
  DB_TEMPLATE = GET_DIMITRI_TEMPLATE(1,/TEMPLATE,VERBOSE=VERBOSE)
  
;----------------------------------------
; CHECK THAT THE DATABASE FILE EXISTS - IF NOT REGENERATE
  
  DIMITRI_DB = GET_DIMITRI_LOCATION('DATABASE')
  TEMP = FILE_INFO(DIMITRI_DB)

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: CHECKING EXISTENCE OF DATABASE FILE'  
  IF TEMP.EXISTS EQ 0 THEN BEGIN
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: DATABASE FILE NOT FOUND, REGENERATING NEW VERSION' 
    OPENW,DB_LUN,DIMITRI_DB,/GET_LUN
    PRINTF,DB_LUN,DB_HEADER
    FREE_LUN,DB_LUN
  ENDIF

;---------------------------------------
; OPEN THE DATABASE AND APPEND DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: OPENING DATABASE AND APPENDING DATA'  
  OPENW,DB_LUN,DIMITRI_DB,/GET_LUN,/APPEND
  FOR DBI = 0L,DB_ITER-1 DO BEGIN
    PRINTF,DB_LUN,FORMAT=DB_FORMAT,$
      DB_DATA.DIMITRI_DATE[DBI],$
      DB_DATA.REGION[DBI],$
      DB_DATA.SENSOR[DBI],$
      DB_DATA.PROCESSING_VERSION[DBI],$
      DB_DATA.YEAR[DBI],$
      DB_DATA.MONTH[DBI],$
      DB_DATA.DAY[DBI],$
      DB_DATA.DOY[DBI],$
      DB_DATA.DECIMAL_YEAR[DBI],$
      DB_DATA.FILENAME[DBI],$
      DB_DATA.ROI_COVER[DBI],$
      DB_DATA.NUM_ROI_PX[DBI],$
      DB_DATA.AUTO_CS[DBI],$
      DB_DATA.MANUAL_CS[DBI],$
      DB_DATA.AUX_DATA_1[DBI],$
      DB_DATA.AUX_DATA_2[DBI],$
      DB_DATA.AUX_DATA_3[DBI],$
      DB_DATA.AUX_DATA_4[DBI],$
      DB_DATA.AUX_DATA_5[DBI],$
      DB_DATA.AUX_DATA_6[DBI],$
      DB_DATA.AUX_DATA_7[DBI],$
      DB_DATA.AUX_DATA_8[DBI],$
      DB_DATA.AUX_DATA_9[DBI],$
      DB_DATA.AUX_DATA_10[DBI]
  ENDFOR

;------------------------------------------
; CLOSE THE DATABASE AND FREE MEMORY

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: CLOSING DATABASE FILE'     
  FREE_LUN,DB_LUN
  DB_DATA = 0 

;------------------------------------------
; IF REQUESTED, SORT THE ENTIRE DATABASE

  IF KEYWORD_SET(SORT_DB) THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: SORTING DATABASE FILE INTO ORDER'  
;------------------------------------------
; READ THE DATABASE AND COMPUTE A STRING A REQUIRED DATA

    DB_DATA = READ_ASCII(DIMITRI_DB,TEMPLATE=DB_TEMPLATE)
    DB_ITER = N_ELEMENTS(DB_DATA.(0))
    TEMP    = STRARR(DB_ITER)

    FOR DBI = 0L,DB_ITER-1 DO BEGIN
      TEMP_YEAR =  STRTRIM(STRING(DB_DATA.YEAR[DBI]),2);STRING(DB_DATA.YEAR[DBI],FORMAT='I4.4')
      TEMP_MONTH = DB_DATA.MONTH[DBI] LE 9 ? '0'+STRTRIM(STRING(DB_DATA.MONTH[DBI]),2) : STRTRIM(STRING(DB_DATA.MONTH[DBI]),2)
      TEMP_DAY =   DB_DATA.DAY[DBI]   LE 9 ? '0'+STRTRIM(STRING(DB_DATA.DAY[DBI]),2) : STRTRIM(STRING(DB_DATA.DAY[DBI]),2)
      TEMP[DBI] = STRING(DB_DATA.REGION[DBI]+DB_DATA.SENSOR[DBI]+DB_DATA.PROCESSING_VERSION[DBI]+TEMP_YEAR+TEMP_MONTH+TEMP_DAY) 
    ENDFOR

;------------------------------------------
; SORT THE DATA BASED ON THE GENERATED STRINGS

    DB_INDX = SORT(TEMP)

;------------------------------------------
; OPEN A TEMPORARY DATABASE FILE AND PRINT SORTED DATA

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: OPENING A TEMPORARY DATABASE FILE'  
    TEMP_DB = DIMITRI_DB+'.TEMP'
    OPENW,DB_LUN,TEMP_DB,/GET_LUN
    PRINTF,DB_LUN,DB_HEADER   
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: UPDATING TEMPORARY DATABASE FILE'  
    FOR DBI = 0L,DB_ITER-1 DO BEGIN
      PRINTF,DB_LUN,FORMAT=DB_FORMAT,$
        DB_DATA.DIMITRI_DATE[DB_INDX[DBI]],$
        DB_DATA.REGION[DB_INDX[DBI]],$
        DB_DATA.SENSOR[DB_INDX[DBI]],$
        DB_DATA.PROCESSING_VERSION[DB_INDX[DBI]],$
        DB_DATA.YEAR[DB_INDX[DBI]],$
        DB_DATA.MONTH[DB_INDX[DBI]],$
        DB_DATA.DAY[DB_INDX[DBI]],$
        DB_DATA.DOY[DB_INDX[DBI]],$
        DB_DATA.DECIMAL_YEAR[DB_INDX[DBI]],$
        DB_DATA.FILENAME[DB_INDX[DBI]],$
        DB_DATA.ROI_COVER[DB_INDX[DBI]],$
        DB_DATA.NUM_ROI_PX[DB_INDX[DBI]],$
        DB_DATA.AUTO_CS[DB_INDX[DBI]],$
        DB_DATA.MANUAL_CS[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_1[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_2[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_3[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_4[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_5[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_6[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_7[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_8[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_9[DB_INDX[DBI]],$
        DB_DATA.AUX_DATA_10[DB_INDX[DBI]]
    ENDFOR    
    
;----------------------------------------
; CLOSE THE TEMPORARY DATABASE, CHECK THAT IT EXISTS, 
; DELETE THE OLD DATABASE AND REPLACE WITH THE SORTED VERSION    
 
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'DIMITRI DATABASE UPDATE: FREEING LUN, IF TEMPORARY FILE SUCCESSFULLY GENERATED THEN REPLACE OLD FILE'     
    FREE_LUN,DB_LUN
    TEMP = FILE_INFO(DIMITRI_DB+'.TEMP')
    IF TEMP.EXISTS EQ 1 THEN BEGIN
      FILE_DELETE,DIMITRI_DB
      FILE_COPY,DIMITRI_DB+'.TEMP',DIMITRI_DB
      FILE_DELETE,DIMITRI_DB+'.TEMP'
    ENDIF ELSE PRINT, 'DIMITRI DATABASE UPDATE: ERROR, TEMPORARY DATABASE DOES NOT EXIST, DATABASE NOT SORTED'


  ENDIF ;END OF SORT_DB KEYWORD

  RETURN,1
END