;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_MERIS_LAT_LON       
;* 
;* PURPOSE:
;*      RETURNS THE LATITUDE AND LONGITUDE OF A MERIS IMAGE
;* 
;* CALLING SEQUENCE:
;*      RES = GET_MERIS_LAT_LON(FILENAME)      
;* 
;* INPUTS:
;*      FILENAME - A SCALAR CONTAINING THE FILENAME OF THE PRODUCT FOR GEOLOCAITON EXTRACTION      
;*
;* KEYWORDS:
;*      ENDIAN_SIZE - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG)
;*      VERBOSE     - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STRUCT.LAT  - LATITUDE IN DEGREES FOR L1B PRODUCT
;*      STRUCT.LON  - LONGITUDE IN DEGREES FOR L1B PRODUCT
;*      STRUCT.LAT_CORR - CORRECITON VALUE TO ACCOUNT FOR LAND ELEVATION 	
;*      STRUCT.LON_CORR - CORRECITON VALUE TO ACCOUNT FOR LAND ELEVATION
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      04 APR 2005 - M BOUVET - PROTOTYPE DIMITRI VERSION
;*      12 NOV 2010 - C KENT   - DIMITRI-2 V1.0
;*      20 NOV 2010 - C KENT   - UPDATED TO ALLOW SINGULAR USAGE (REMOVED COMMON BLOCKS)
;*      22 NOV 2010 - C KENT   - ADDED VERBOSE KEYWORD OPTION
;*      01 DEC 2010 - C KENT   - ADDED FILENAME ERROR HANDLING
;*      02 DEC 2010 - C KENT   - UPDATED HEADER INFORMATION
;*      23 DEC 2010 - C KENT   - CHANGED LAT LINE TO DOUBLE ARRAYS DUE TO DIFFERENCES 
;*                               BETWEEN WINDOWS/LINUX
;*      12 SEP 2011 - C KENT   - UPDATED TO OUTPUT LAT_CORR AND LON_CORR VALUES
;*
;* VALIDATION HISTORY:
;*      01 DEC 2010 - C KENT   - WINDOWS 32-BIT MACHINE: COMPILATION SUCCESSFUL,
;*                               VERY SLIGHT DIFFERENCES TO BEAM VISAT (~0.0002 DEGREE)
;*      05 JAN 2010 - C KENT   - LINUX 64-BIT MACHINE IDL 8.0: COMPILATION SUCCESSFUL,
;*                               NO DIFFERENCES OBSERVED AGAINST WINDOWS 32-BIT MACHINE
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_MERIS_LAT_LON,FILENAME,ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE

;------------------------------------------------
; CHECK FILENAME AND IN_BAND ARE NOMINAL

  IF FILENAME EQ '' THEN BEGIN
    PRINT, 'MERIS L1B LAT LON: ERROR, INPUT FILENAME INCORRECT'
    RETURN,-1
  ENDIF
 
;------------------------------------------------
; IF ENDIAN SIZE NOT PROVIDED THEN GET VALUE

  IF N_ELEMENTS(ENDIAN_SIZE) EQ 0 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'MERIS L1B LAT LON: NO ENDIAN SIZE PROVIDED, RETRIEVING...'
    ENDIAN_SIZE = GET_ENDIAN_SIZE(/VERBOSE)
    ENDIF ELSE ENDIAN_SIZE = GET_ENDIAN_SIZE()
  ENDIF

;------------------------------------------------
;DEFINE HEADER VARIABLES

	MPH_SIZE = 1247
	SPH_SIZE = 9942
	FILE_MPH = BYTARR(MPH_SIZE)
	FILE_SPH = BYTARR(SPH_SIZE)

;-----------------------------------------------
; OPEN THE FILE AND EXTRACT HEADER

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: OPENING PRODUCT'
	OPENR,PRD_GEO,FILENAME,/GET_LUN
	READU,PRD_GEO,FILE_MPH
	READU,PRD_GEO,FILE_SPH

;-----------------------------------------------
; RETRIEVE: POSITION OF DSD, TP SUBSAMPLING FREQUENCY,LINE SIZE,TP PER LINE,DSD,OFFSET,DS_SIZE,NUMBER OF RECORDS, RECORD SIZE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: RETRIEVING DSD INFORMATION'
  TP_POS =STRPOS(FILE_SPH,'DS_NAME="Tie points ADS              "')
  TP_SFREQ = STRMID(FILE_SPH, STRPOS(FILE_SPH,'SAMPLES_PER_TIE_PT=+')+20, 3)+0L
  LINE_SIZE =STRMID(FILE_SPH, STRPOS(FILE_SPH,'LINE_LENGTH=+')+13, 5)+0L
  NB_TP_LINE=FLOOR(LINE_SIZE/TP_SFREQ)+1

  TP_DSD=STRMID(FILE_SPH, TP_POS,280)
  TP_OFFSET = STRMID(TP_DSD, strpos(TP_DSD, 'DS_OFFSET=+')+11,20)+0L
  TP_SIZE = STRMID(TP_DSD, strpos(TP_DSD, 'DS_SIZE=+')+9,20)+0L
  TP_DSR_NUMBER = STRMID(TP_DSD, strpos(TP_DSD, 'NUM_DSR=+')+9,20)+0L
  TP_DSR_SIZE = STRMID(TP_DSD, strpos(TP_DSD, 'DSR_SIZE=+')+10,20)+0L

;-----------------------------------------
; DEFINE LATITUDE AND LONGITUDE ARRAYS

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: DEFINING DATA ARRAYS FOR OUTPUT'
	LAT = LONARR(NB_TP_LINE,TP_DSR_NUMBER)
	LON = LONARR(NB_TP_LINE,TP_DSR_NUMBER)
  
  LAT_CORR = LONARR(NB_TP_LINE,TP_DSR_NUMBER)
  LON_CORR = LONARR(NB_TP_LINE,TP_DSR_NUMBER)

	LAT_REC = LONARR(NB_TP_LINE)
	LON_REC = LONARR(NB_TP_LINE)
	
	LAT_REC_CORR = LONARR(NB_TP_LINE)
	LON_REC_CORR = LONARR(NB_TP_LINE)
	
;-----------------------------------------
; DEFINE NO DATA ARRAYS

	NODATA1 = BYTARR(13)
	NODATA2 = LONARR(NB_TP_LINE)

;-----------------------------------------
; LOOP OVER EACH RECORD AND EXTRACT GEOLOCATION DATA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: STARTING LOOP FOR DATA EXTRACTION'
	FOR GREC=0,TP_DSR_NUMBER-1 DO BEGIN 

;----------------------------------------
; POINT TO THE MDS WITHIN THE FILE
		
		POINT_LUN, PRD_GEO, TP_OFFSET+GREC*TP_DSR_SIZE

;----------------------------------------
; SKIP EMPTY BYTES

		READU,PRD_GEO,NODATA1

;----------------------------------------
; READ LATITUDE AND LONGITUDE RECORDS

		READU,PRD_GEO,LAT_REC
		READU,PRD_GEO,LON_REC

;----------------------------------------
; SKIP EMPTY BYTES

		READU,PRD_GEO,NODATA2
		READU,PRD_GEO,NODATA2

;----------------------------------------
; READ LATITUDE AND LONGITUDE CORRECTIONS

		READU,PRD_GEO,LAT_REC_CORR
		READU,PRD_GEO,LON_REC_CORR
	
;----------------------------------------
; SWAP ENDIAN IF NEEDED - MERIS DATA IS BIG ENDIAN
	
		IF ENDIAN_SIZE EQ 0 THEN BEGIN
		
			LAT_REC		= SWAP_ENDIAN(LAT_REC)
			LON_REC		= SWAP_ENDIAN(LON_REC)
			LAT_REC_CORR	= SWAP_ENDIAN(LAT_REC_CORR)
			LON_REC_CORR	= SWAP_ENDIAN(LON_REC_CORR)
		
		ENDIF
	
;---------------------------------------
; STORE EXTRACTED DATA -20110912 removed section - lat, lat_corr, lon and lon_corr will now be returned from function

;		LAT(*,GREC)=double(LAT_REC)+double(LAT_REC_CORR)
;		LON(*,GREC)=double(LON_REC)+double(LON_REC_CORR)
  
  LAT(*,GREC)=DOUBLE(LAT_REC)
  LON(*,GREC)=DOUBLE(LON_REC)
  LAT_CORR(*,GREC)=DOUBLE(LAT_REC_CORR)
  LON_CORR(*,GREC)=DOUBLE(LON_REC_CORR)  
 
	ENDFOR ;END OF LOOP ON GEOLOCATION RECORDS

;---------------------------------------
; CLOSE THE FILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: CLOSING PRODUCTS AND RELEASING THE LUN'
	CLOSE, PRD_GEO
	FREE_LUN, PRD_GEO

;---------------------------------------
; FIND NUMBER OF PIXELS WITHIN MERIS RADIANCE FRAME

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: RETRIEVE DIMENSIONS OF RADIANCE PRODUCT'
	RD_POS 		  = STRPOS(FILE_SPH,'DS_NAME="Radiance MDS(1)             "')
	RD_DSD 		  = STRMID(FILE_SPH, RD_POS,280)
	NB_RD_LINE 	= STRMID(RD_DSD, STRPOS(RD_DSD, 'NUM_DSR=+')+9,20)

;---------------------------------------
; CONVERT VALUES INTO DEGREES

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: CONVERT VALUES INTO DEGREES'
	LAT = DOUBLE(LAT)*DOUBLE(1E-6)
	LON = DOUBLE(LON)*DOUBLE(1E-6)
  LAT_CORR = DOUBLE(LAT_CORR)*DOUBLE(1E-6)
  LON_CORR = DOUBLE(LON_CORR)*DOUBLE(1E-6)

;---------------------------------------
; INTERPOLATE VALUES TO RADIANCE GRID

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: REGRID DATA INTO RADIANCE PRODUCT DIMENSIONS'
	LAT = CONGRID(LAT,LINE_SIZE,NB_RD_LINE,/MINUS_ONE,/INTERP)
	LON = CONGRID(LON,LINE_SIZE,NB_RD_LINE,/MINUS_ONE,/INTERP)
  LAT_CORR = CONGRID(LAT_CORR,LINE_SIZE,NB_RD_LINE,/MINUS_ONE,/INTERP)
  LON_CORR = CONGRID(LON_CORR,LINE_SIZE,NB_RD_LINE,/MINUS_ONE,/INTERP)

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B LAT LON: RETURNING LATITUDE AND LONGITUDE'
	RETURN,{LAT:LAT,LON:LON,LAT_CORR:LAT_CORR,LON_CORR:LON_CORR}

END
