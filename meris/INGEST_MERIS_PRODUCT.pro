;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INGEST_MERIS_PRODUCT       
;* 
;* PURPOSE:
;*      INGESTS MERIS L1B DATA INTO DIMITRI DATABASE. MULTIPLE PRODUCT 
;*	    EXTRACTION IS AVAILABLE BUT IT EXPECTS ALL FILES TO BE THE SAME REGION/PROCESSING. 
;*      OUTPUTS QUICKLOOK IMAGES, UPDATES DATABASE AND APPENDS DATA TO SAV FILE FOR 
;*      SPECIFIED REGION AND PROCESSING.
;* 
;* CALLING SEQUENCE:
;*      RES = INGEST_MERIS_PRODUCT(IFILES)      
;* 
;* INPUTS:
;*      IFILES -  A STRING OR STRING ARRAY OF THE FULL PATH FILENAMES OF PRODUCTS 
;*                FOR INGESTION.      
;*
;* KEYWORDS:
;*      INPUT_FOLDER      - A STRING CONTAINING THE FULL PATH OF THE 'INPUT' FOLDER, IF 
;*                          NOT PROVIDED THEN IT IS DERIVED FROM THE FILENAME
;*      ICOORDS           - A FOUR ELEMENT FLOATING-POINT ARRAY CONTAINING THE NORTH, SOUTH, 
;*                          EAST AND WEST COORDINATES OF THE ROI, E.G [50.,45.,10.,0.]
;*      ENDIAN_SZE        - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG), IF NOT PROVIDED 
;*                          THEN COMPUTED.
;*      COLOUR_TABLE      - USER DEFINED IDL COLOUR TABLE INDEX (DEFAULT IS 39)
;*      PLOT_XSIZE        - WIDTH OF GENERATED PLOTS (DEFAULT IS 700PX)
;*      PLOT_YSIZE        - HEIGHT OF GENERATED PLOTS (DEFAULT IS 400PX)
;*      NO_ZBUFF          - IF SET THEN PLOTS ARE GENERATED IN WINDOWS AND NOT 
;*                          WIHTIN THE Z-BUFFER.
;*      NO_QUICKLOOK      - IF SET THEN QUICKLOOKS ARE NOT GENERATED FOR IFILES.
;*      VERBOSE           - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        04 JUL 2005 - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*        09 NOV 2010 - C KENT    - DIMITRI-2 V1.0
;*        20 NOV 2010 - C KENT    - UPDATED TO ALLOW SINGULAR USAGE (REMOVED COMMON BLOCKS)
;*        22 NOV 2010 - C KENT    - ADDED VERBOSE KEYWORD OPTION
;*        02 DEC 2010 - C KENT    - UPDATED PROGRAMMING AND SZA TO PIXEL DATA INSTEAD OF 
;*                                  AVERAGE WHEN COMPTING TOA REFLECTANCE. 
;*                                  HEADER ALSO UPDATED
;*        03 DEC 2010 - C KENT    - REMOVED NB_PIX THRESHOLD, ALL PRODUCT APPENDED TO DATABASE, 
;*                                  NO DATA FILES ARE SET TO -1
;*        20 DEC 2010 - C KENT    - UPDATED COMMENTS AND HEADER INFORMATION
;*        10 JAN 2011 - C KENT    - CHANGED SAVED OUTPUT VARIABLE TO SENSOR_L1B_REF
;*        12 JAN 2011 - C KENT    - OUTPUT RGB QUICKLOOKS AS DEFUALT, UPDATED OUTPUT DATA 
;*                                  WITH SAA AND VAA (REMOVED RAA) 
;*        21 MAR 2011 - C KENT    - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*        22 MAR 2011 - C KENT    - ADDED CONFIGURAITON FILE DEPENDENCE
;*        01 JUL 2011 - C KENT    - ADDED ANGLE CORRECTOR
;*        04 JUL 2011 - C KENT    - UPDATED TO INCLUDE NEW AUXILARY INFORMATION, 
;*                                  AND CODE REVISION TO IMPROVE PERFORMANCE (SOLAR IRRADIANCE COMPUTATION)
;*        12 JUL 2011 - C KENT    - FIXED AUX INFO BUG
;*        14 JUL 2011 - C KENT    - UPDATED TIME EXTRACTION SECTION
;*        23 AUG 2011 - C KENT    - ADD NETCDF OUTPUT FUNCTIONALITY
;*        24 AUG 2011 - C KENT    - UPDATED NETCDF OUTPUT FUNCTIONALITY
;*
;* VALIDATION HISTORY:
;*        02 DEC 2010 - C KENT    - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        12 APR 2011 - C KENT    - LINUX 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INGEST_MERIS_PRODUCT,IFILES,INPUT_FOLDER=INPUT_FOLDER,ICOORDS=ICOORDS,$
         ENDIAN_SZE=ENDIAN_SIZE,COLOUR_TABLE=COLOUR_TABLE,$
         PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,NO_ZBUFF=NO_ZBUFF,NO_QUICKLOOK=NO_QUICKLOOK,$
         VERBOSE=VERBOSE

;------------------------
; KEYWORD PARAMETER CHECK - NOTE, ASSUMES ALL PRODUCT ARE RELATED TO THE SAME REGION/PROCESSING

  IF STRCMP(STRING(IFILES[0]),'') THEN BEGIN
    PRINT, 'MERIS L1B INGEST: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  
  IF N_ELEMENTS(INPUT_FOLDER) EQ 0 THEN INPUT_FOLDER = GET_DIMITRI_LOCATION('INPUT')

  DELIM = GET_DIMITRI_LOCATION('DL')
  TEMP = STRSPLIT(IFILES[0],DELIM,/EXTRACT)
 
  TEMP_INF  = WHERE(STRCMP(TEMP,'Input') EQ 1)
  TEMP_INF  = TEMP_INF(N_ELEMENTS(TEMP_INF)-1)
  IREGION   = TEMP[TEMP_INF+1]
  IREGION   = STRMID(IREGION,5,STRLEN(IREGION)) 
  SENSOR    = TEMP[TEMP_INF+2]
  IPROC     = TEMP[TEMP_INF+3]
  IPROC     = STRMID(IPROC,5,STRLEN(IPROC)) 
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()
  BADVAL    = -999
  MER_SITE_TYPE = GET_SITE_TYPE(IREGION,VERBOSE=VERBOSE)
  
  IF N_ELEMENTS(ICOORDS) EQ 0 THEN BEGIN
    PRINT, 'MERIS L1B INGEST: NO ROI COORDINATES PROVIDED, USING DEFAULT OF [90.,-90,180.0,-180.0]'
    ICOORDS = [90.,-90.,180.0,-180.0]
  ENDIF
  IF N_ELEMENTS(COLOUR_TABLE) EQ 0 THEN BEGIN
    PRINT, 'MERIS L1B INGEST: NO COLOR_TABLE SET, USING DEFAULT OF 39'
    COLOUR_TABLE = CFIG_DATA.(1)[2]
  ENDIF
  IF N_ELEMENTS(PLOT_XSIZE) EQ 0 THEN BEGIN
    PRINT, 'MERIS L1B INGEST: PLOT_XSIZE NOT SET, USING DEFAULT OF 700'
    PLOT_XSIZE = CFIG_DATA.(1)[0]
  ENDIF
  IF N_ELEMENTS(PLOT_YSIZE) EQ 0 THEN BEGIN
    PRINT, 'MERIS L1B INGEST: PLOT_YSIZE NOT SET, USING DEFAULT OF 400'
    PLOT_YSIZE = CFIG_DATA.(1)[1]
  ENDIF  

;------------------------------------------------
; IF ENDIAN SIZE NOT PROVIDED THEN GET VALUE

  IF N_ELEMENTS(ENDIAN_SIZE) EQ 0 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: NO ENDIAN SIZE PROVIDED, RETRIEVING...'
    ENDIAN_SIZE = GET_ENDIAN_SIZE(VERBOSE=VERBOSE)
  ENDIF

;------------------------
; DEFINE OUTPUT

  OUTPUT_SAV = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+SENSOR+'_TOA_REF.dat')
  NCDF_FILENAME = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+IREGION+'_'+SENSOR+'_Proc_'+IPROC+'.nc')

;------------------------
; GET NUMBER OF IFILES 

  NB_FILES = N_ELEMENTS(IFILES)

;-----------------------------------------------
; GET THE DATABASE STRUCTURE

  DB_DATA = GET_DIMITRI_TEMPLATE(NB_FILES,/DB)
  
;-----------------------------------------------  
; ADD DATA OF INGESTION TO DB_DATA - NEEDS REWORKING INTO YYYYMMDD

  TEMP = SYSTIME()
  TEMP = STRMATCH(STRMID(TEMP,8,1),' ') ? '0'+STRUPCASE(STRING(STRMID(TEMP,9,1)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4))) : STRUPCASE(STRING( STRMID(TEMP,8,2)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4)))
  DB_DATA.DIMITRI_DATE = TEMP 

;-----------------------------------------------
; ADD REGION, SENSOR AND PROC VERSION TO DB_DATA

  DB_DATA.REGION = IREGION
  DB_DATA.SENSOR = SENSOR
  DB_DATA.PROCESSING_VERSION = IPROC

;----------------------------------
; DEFINE MERIS SPECIFIC PARAMETERS 

  NB_BANDS = 15
  FNAME_STR = 'MER_RR__1'

;----------------------------------
; DEFINE THE STATISTICAL ARRAYS

	ROI_AVG_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	ROI_STD_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	NB_ROI_PX        = FLTARR(NB_FILES)
	GOOD_RECORD      = MAKE_ARRAY(NB_FILES,/INTEGER,VALUE=0)
	IFILE_DATE 	     = DBLARR(5,NB_FILES);CONTAINS YEAR,MONTH,DAY,DOY,DECIMEL_YEAR
	IFILE_VIEW 	     = DBLARR(4,NB_FILES);CONTAINS SENSOR ZENITH,SENSOR AZIMUTH,SOLAR ZENITH,SOLAR AZIMUTH
	IFILE_AUX        = DBLARR(12,NB_FILES);CONTAINS OZONE,PRESSURE,RELHUMIDITY,WIND_ZONAL,WIND_MERID, AND WVAP (MU AND SIGMA)
  
;---------------------------------
; IF ONLY 1 PRODUCT FOR INGESTION THEN REFORM ARRAYS
  
  IF NB_FILES EQ 1 THEN BEGIN
    ROI_AVG_TOA_REF  = REFORM(ROI_AVG_TOA_REF,NB_BANDS,NB_FILES)
    ROI_STD_TOA_REF  = REFORM(ROI_STD_TOA_REF,NB_BANDS,NB_FILES)
    IFILE_DATE       = REFORM(IFILE_DATE,5,NB_FILES)
    IFILE_VIEW       = REFORM(IFILE_VIEW,4,NB_FILES)
    IFILE_AUX        = REFORM(IFILE_AUX,12,NB_FILES)
  ENDIF

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'MERIS L1B INGEST: DEFINITION OF OUTPUT ARRAYS:'
    HELP, ROI_AVG_TOA_REF,ROI_STD_TOA_REF,NB_ROI_PX,GOOD_RECORD,IFILE_DATE,IFILE_VIEW
  ENDIF

;---------------------------------
; ADD DATA TO NETCDF OUTPUT STRUCTURE

  NCDF_OUT = GET_DIMITRI_EXTRACT_NCDF_DATA_STRUCTURE(NB_FILES,NB_BANDS)
  NCDF_OUT.ATT_FNAME  = 'Site_'+IREGION+'_'+SENSOR+'_'+'Proc_'+IPROC+'.nc'
  NCDF_OUT.ATT_TOOL   = GET_DIMITRI_LOCATION('TOOL')
  NCDF_OUT.ATT_SENSOR = SENSOR
  NCDF_OUT.ATT_PROCV  = IPROC
  NCDF_OUT.ATT_PRES   = STRTRIM(STRING(SENSOR_PIXEL_SIZE(SENSOR)),2)+' KM'
  NCDF_OUT.ATT_NBANDS = STRTRIM(STRING(NB_BANDS,2))
  NCDF_OUT.ATT_SITEN  = IREGION
  NCDF_OUT.ATT_SITEC  = STRJOIN(STRTRIM(STRING(ICOORDS),2),' ')
  NCDF_OUT.ATT_SITET  = MER_SITE_TYPE

;----------------------------------
; START MAIN LOOP OVER EACH IFILE
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: STARTING INGESTION LOOP ON MERIS PRODUCTS'
	FOR IN_FNAME=0,NB_FILES-1 DO BEGIN; IN_FNAME IS RESERVED FOR LOOPS WITHIN THE INGESTION ROUTINES

    TEMP = STRSPLIT(IFILES[IN_FNAME],DELIM,/EXTRACT)
    DB_DATA.FILENAME[IN_FNAME] = TEMP[N_ELEMENTS(TEMP)-1] 

;------------------------------------------
; GENERATE AN RGB QUICKLOOK WITH THE ROI OVERLAID
  
    IF N_ELEMENTS(NO_QUICKLOOK) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: GENERATE QUICKLOOK OF PRODUCT'
        IF FIX(CFIG_DATA.(1)[3]) EQ 1 THEN QL_STATUS =  GET_MERIS_QUICKLOOK(IFILES[IN_FNAME],/ROI,/RGB,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE) $
          ELSE QL_STATUS =  GET_MERIS_QUICKLOOK(IFILES[IN_FNAME],/ROI,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)
      
      IF KEYWORD_SET(VERBOSE) THEN IF QL_STATUS EQ -1 THEN PRINT, 'MERIS L1B INGEST: QUICKLOOK GENERATION FAILED - ',IFILES[IN_FNAME] $
        ELSE PRINT, 'MERIS L1B INGEST: QUICKLOOK GENERATION SUCCESS' 
    ENDIF 

;------------------------------------------
; RETRIEVE AUX DATA FILENAMES FOR DB_DATA

  TEMP = GET_MERIS_AUX_FILES(IFILES[IN_FNAME],VERBOSE=VERBOSE)	

	DB_DATA.AUX_DATA_1[IN_FNAME] = TEMP[0]
	DB_DATA.AUX_DATA_2[IN_FNAME] = TEMP[1] 
	DB_DATA.AUX_DATA_3[IN_FNAME] = TEMP[2] 
	DB_DATA.AUX_DATA_4[IN_FNAME] = TEMP[3] 
	DB_DATA.AUX_DATA_5[IN_FNAME] = TEMP[4] 
	DB_DATA.AUX_DATA_6[IN_FNAME] = TEMP[5] 
	DB_DATA.AUX_DATA_7[IN_FNAME] = TEMP[6] 
	DB_DATA.AUX_DATA_8[IN_FNAME] = TEMP[7] 
	DB_DATA.AUX_DATA_9[IN_FNAME] = TEMP[8] 
	DB_DATA.AUX_DATA_10[IN_FNAME] = TEMP[9] 
        
;----------------------------------
; RETRIEVE DATE INFORMATION

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING DATE INFORMATION'
    STR_POS 		            = STRPOS(IFILES[IN_FNAME],FNAME_STR, /REVERSE_SEARCH)
    IFILE_DATE[0,IN_FNAME]	= STRMID(IFILES[IN_FNAME],STR_POS+14,4)
    IFILE_DATE[1,IN_FNAME]	= STRMID(IFILES[IN_FNAME],STR_POS+18,2)
    IFILE_DATE[2,IN_FNAME]	= STRMID(IFILES[IN_FNAME],STR_POS+20,2)
    
    DATE_HR =STRMID(IFILES[IN_FNAME],STR_POS+23,2) 
    DATE_MIN =STRMID(IFILES[IN_FNAME],STR_POS+25,2) 
    DATE_SEC =STRMID(IFILES[IN_FNAME],STR_POS+27,2) 
 
    IF FLOAT(IFILE_DATE[0,IN_FNAME]) MOD 4 EQ 0 THEN DIY = 366.0 ELSE DIY = 365.0
   
    THR = FLOAT(STRMID(IFILES[IN_FNAME],STR_POS+23,2))
    TMM = FLOAT(STRMID(IFILES[IN_FNAME],STR_POS+25,2))
    TSS = FLOAT(STRMID(IFILES[IN_FNAME],STR_POS+27,2))
    TTIME = DOUBLE((THR/(DIY*24.))+(TMM/(DIY*60.*24.))+TSS/(DIY*60.*60.*24.)) 
 
    IFILE_DATE[3,IN_FNAME]	= JULDAY(IFILE_DATE[1,IN_FNAME],IFILE_DATE[2,IN_FNAME],IFILE_DATE[0,IN_FNAME])-JULDAY(1,0,IFILE_DATE[0,IN_FNAME])
    IFILE_DATE[4,IN_FNAME]  = double(IFILE_DATE[0,IN_FNAME])+(DOUBLE(IFILE_DATE[3,IN_FNAME])/DIY)+TTIME

;----------------------------------
; ADD DATE INFORMATION TO DB_DATA

    DB_DATA.YEAR[IN_FNAME]  = IFILE_DATE[0,IN_FNAME]
    DB_DATA.MONTH[IN_FNAME] = IFILE_DATE[1,IN_FNAME]
    DB_DATA.DAY[IN_FNAME]   = IFILE_DATE[2,IN_FNAME]
    DB_DATA.DOY[IN_FNAME]   = IFILE_DATE[3,IN_FNAME]
    DB_DATA.DECIMAL_YEAR[IN_FNAME] = IFILE_DATE[4,IN_FNAME]
	
;----------------------------------
; RETRIEVE INPUT FILE GEOLOCATION

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING GEOLOCATION INFORMATION'
		IFILE_GEO = GET_MERIS_LAT_LON(IFILES[IN_FNAME],ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)

;----------------------------------
; RETRIEVE INPUT FILE L1B RADIANCE - BASE PIXEL VALIDITY ON B412

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING RADIANCE INFORMATION'
    IFILE_TOA = GET_MERIS_L1B_RADIANCE(IFILES[IN_FNAME],0,ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)
    
;------------------------------------------
; RETRIEVE INDEX OF NOMINAL DATA WITHIN ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING INDEX OF PIXELS WITHIN ROI'
		ROI_INDEX = WHERE($
			  	IFILE_GEO.LAT LT ICOORDS[0] AND $
			  	IFILE_GEO.LAT GT ICOORDS[1] AND $
			  	IFILE_GEO.LON LT ICOORDS[2] AND $
			  	IFILE_GEO.LON gT ICOORDS[3] AND $
			  	IFILE_TOA GT 0.0  , $
			  	NB_PIX $
			  	)
	  	
	  DB_DATA.NUM_ROI_PX[IN_FNAME] = NB_PIX	

;-----------------------------------------
; SET INITIAL VALUES OF CLOUD SCREENING

    DB_DATA.AUTO_CS[IN_FNAME] = -1.0
    DB_DATA.MANUAL_CS[IN_FNAME] = -1

;-----------------------------------------
; STORE DATE IN NETCDF STRUCTURE

NCDF_OUT.VAR_PNAME[IN_FNAME]  = DB_DATA.FILENAME[IN_FNAME] 
NCDF_OUT.VAR_PTIME[IN_FNAME]  = STRMID(IFILES[IN_FNAME],STR_POS+14,8)+' '+DATE_HR+':'+DATE_MIN+':'+DATE_SEC
NCDF_OUT.VAR_DTIME[IN_FNAME]  = DB_DATA.DECIMAL_YEAR[IN_FNAME]

;-----------------------------------------
; IF NUMBER OF PIXELS IN ROI LESS THAN 
; DEFINED THRESHOLD THEN DO NOT RETRIEVE 
; TOA REFLECTANCE

		IF ROI_INDEX[0] EQ -1 or nb_pix lt 5 THEN BEGIN
		  DB_DATA.NUM_ROI_PX[IN_FNAME] = -1
      IFILE_VIEW[*,IN_FNAME]= BADVAL
      IFILE_AUX[*,IN_FNAME] = BADVAL
      ROI_AVG_TOA_REF(*,IN_FNAME) = BADVAL
      ROI_STD_TOA_REF(*,IN_FNAME) = BADVAL
      GOTO, NO_ROI
		ENDIF
		
		GOOD_RECORD[IN_FNAME]=1
		TEMP_AUTO_CS = -1.0
    CS_RHO = MAKE_ARRAY(NB_PIX,NB_BANDS)
    CS_GEO = MAKE_ARRAY(NB_PIX,4)
    
;------------------------------------------
; RETRIEVE VIEWING GEOMETRIES

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING VIEWING GEOMETRIES'
    TEMP = GET_MERIS_VIEWING_GEOMETRIES(IFILES[IN_FNAME],ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)
    TEMP_ANGLES = DIMITRI_ANGLE_CORRECTOR(TEMP.VZA,TEMP.VAA,TEMP.SZA,TEMP.SAA)
        
    IFILE_VIEW[0,IN_FNAME]=MEAN(TEMP_ANGLES.VZA[ROI_INDEX])
    IFILE_VIEW[1,IN_FNAME]=MEAN(TEMP_ANGLES.VAA[ROI_INDEX])
    IFILE_VIEW[2,IN_FNAME]=MEAN(TEMP_ANGLES.SZA[ROI_INDEX])
    IFILE_VIEW[3,IN_FNAME]=MEAN(TEMP_ANGLES.SAA[ROI_INDEX])
    TEMP_SZA = TEMP_ANGLES.SZA[ROI_INDEX]
        
    CS_GEO[*,0] =TEMP_ANGLES.SZA(ROI_INDEX)
    CS_GEO[*,1] =TEMP_ANGLES.VZA(ROI_INDEX)
    CS_GEO[*,2] =TEMP_ANGLES.SAA(ROI_INDEX)
    CS_GEO[*,3] =TEMP_ANGLES.VAA(ROI_INDEX)
    TEMP=0
    TEMP_ANGLES = 0

;---------------------------------------
; RETRIEVE THE AUXILIARY INFORMATION

  TEMP = GET_MERIS_ECMWF_OZONE(IFILES[IN_FNAME],VERBOSE=VERBOSE)
  IFILE_AUX[0,IN_FNAME] = MEAN(TEMP[ROI_INDEX])
  IFILE_AUX[1,IN_FNAME] = STDEV(TEMP[ROI_INDEX])

  TEMP = GET_MERIS_ECMWF_PRESSURE(IFILES[IN_FNAME],VERBOSE=VERBOSE)
  IFILE_AUX[2,IN_FNAME] = MEAN(TEMP[ROI_INDEX])
  IFILE_AUX[3,IN_FNAME] = STDEV(TEMP[ROI_INDEX])

  TEMP = GET_MERIS_ECMWF_HUMIDITY(IFILES[IN_FNAME],VERBOSE=VERBOSE)
  IFILE_AUX[4,IN_FNAME] = MEAN(TEMP[ROI_INDEX])
  IFILE_AUX[5,IN_FNAME] = STDEV(TEMP[ROI_INDEX])

  TEMP = GET_MERIS_ECMWF_WIND(IFILES[IN_FNAME],VERBOSE=VERBOSE)
  IFILE_AUX[6,IN_FNAME] = MEAN(TEMP.ZONAL[ROI_INDEX])
  IFILE_AUX[7,IN_FNAME] = STDEV(TEMP.ZONAL[ROI_INDEX])
  IFILE_AUX[8,IN_FNAME] = MEAN(TEMP.MERID[ROI_INDEX])
  IFILE_AUX[9,IN_FNAME] = STDEV(TEMP.MERID[ROI_INDEX])

  IFILE_AUX[10,IN_FNAME] = BADVAL
  IFILE_AUX[11,IN_FNAME] = BADVAL
  TEMP=0

;---------------------------------------
; RETRIEVE THE DETECTOR INDEX

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING DETECTOR INDEX'
    CCD_INDEX = GET_MERIS_L1B_DETECTOR_INDEX(IFILES[IN_FNAME],ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)
		
		CCD_INDEX = CCD_INDEX[ROI_INDEX]
		CCD_MIN   = MIN(CCD_INDEX,MAX=CCD_MAX)

;---------------------------------------
; RETRIEVE THE SOLAR SPECTRAL FLUX RESPONSE 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING SOLAR FLUX RESPONSE'
    SOLAR_FLUX_RESPONSE = GET_MERIS_SOLAR_FLUX_RR(VERBOSE=VERBOSE)
		SFR_DIMS  = SIZE(SOLAR_FLUX_RESPONSE)

;----------------------------------------
; RETRIEVE F0 - SOLAR IRRADIANCE

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING SOLAR IRRADIANCE'
    SUN_IRR_F0 = GET_MERIS_L1B_F0(IFILES[IN_FNAME],ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)

;----------------------------------------
; COMPUTE TOA REFLECTANCE FOR EACH BAND 

    IFILE_TOA = 0
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: STARTING LOOP OVER EACH BAND'
		
		FOR IN_BAND=0,NB_BANDS-1 DO BEGIN

      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: RETRIEVING RADIANCE FOR BAND -',IN_BAND
      TOA_REF=GET_MERIS_L1B_RADIANCE(IFILES[IN_FNAME],IN_BAND,ENDIAN_SIZE=ENDIAN_SIZE,VERBOSE=VERBOSE)
			TOA_REF = TOA_REF[ROI_INDEX]
			
;----------------------------------------
; RETRIEVE F0 - SOLAR IRRADIANCE AT IN_BAND

			SUN_IRR_F0_BAND = SUN_IRR_F0[IN_BAND]

;----------------------------------------
; COMPUTE SOLAR IRRADIANCE OVER IMAGE

			IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: COMPUTING SOLAR IRRADIANCE OVER IMAGE'
			SUN_IRR = FLTARR(N_ELEMENTS(ROI_INDEX))
			FOR IN_SIRR=CCD_MIN,CCD_MAX DO BEGIN
        TEMP = WHERE(CCD_INDEX EQ IN_SIRR)
        IF TEMP[0] GT -1 THEN BEGIN
          SUN_IRR[TEMP] = SOLAR_FLUX_RESPONSE[IN_BAND+1,IN_SIRR]
        ENDIF
      ENDFOR
	
;----------------------------------------
; CORRECT SOLAR IRRADIANCE FOR EARTH/SUN DISTANCE

      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: CORRECTING SOLAR IRRADIANCE FOR EARTH-SUN DISTANCE'
			SUN_IRR = SUN_IRR*(1.0+0.0167*cos(2.0*!DPI*(IFILE_DATE[3,IN_FNAME]-3.0)/DIY))^2
      
;----------------------------------------
; COMPUTE TOA REFLETANCE TAKING INTO ACCOUNT OF MERIS DETECTORS 

      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: COMPUTE TOA REFLECTANCE FOR BAND -',IN_BAND

;-----------------------------------------      
; CHANGE 0'S TO 0.0001 TO AVOID ARITHMETIC ERRORS - WILL NOT IMPACT ON ROI AVERAGE REFLECTANCES

      TEMP = WHERE(TOA_REF LE 0.0,TCOUNT)
        IF TCOUNT GT 0 THEN TOA_REF[TEMP] = 0.0001
      TEMP = WHERE(SUN_IRR LE 0.0,TCOUNT)
        IF TCOUNT GT 0 THEN SUN_IRR[TEMP] = 1000.0     
        
			TOA_REF = TOA_REF*SUN_IRR_F0[IN_BAND]/SUN_IRR
      TOA_REF = TOA_REF*!DPI/COS(TEMP_SZA*!DTOR)/SUN_IRR
      
;-----------------------------------------
; ADD TOA REFLECTANCE TO OUTPUT ARRAY

      VALID = WHERE(TOA_REF GT 0.0 AND TOA_REF LT 5.0,COUNT)
      IF COUNT GT 0 THEN BEGIN
       ROI_AVG_TOA_REF(IN_BAND,IN_FNAME) = MEAN(TOA_REF[VALID])
       ROI_STD_TOA_REF(IN_BAND,IN_FNAME) = STDDEV(TOA_REF[VALID])
      ENDIF

;-----------------------------------------
; STORE DATE IN NETCDF STRUCTURE

      NCDF_OUT.VAR_VZA[IN_FNAME]      = IFILE_VIEW[0,IN_FNAME]
      NCDF_OUT.VAR_VAA[IN_FNAME]      = IFILE_VIEW[1,IN_FNAME]
      NCDF_OUT.VAR_SZA[IN_FNAME]      = IFILE_VIEW[2,IN_FNAME]
      NCDF_OUT.VAR_SAA[IN_FNAME]      = IFILE_VIEW[3,IN_FNAME]
      NCDF_OUT.VAR_PIX[IN_BAND,IN_FNAME]      = COUNT
      NCDF_OUT.VAR_RHOMU[IN_BAND,IN_FNAME]    = ROI_AVG_TOA_REF(IN_BAND,IN_FNAME)
      NCDF_OUT.VAR_RHOSD[IN_BAND,IN_FNAME]    = ROI_STD_TOA_REF(IN_BAND,IN_FNAME)
      NCDF_OUT.VAR_OZONEMU[IN_FNAME]  = IFILE_AUX[0,IN_FNAME]
      NCDF_OUT.VAR_OZONESD[IN_FNAME]  = IFILE_AUX[1,IN_FNAME]
      NCDF_OUT.VAR_PRESSMU[IN_FNAME]  = IFILE_AUX[2,IN_FNAME]
      NCDF_OUT.VAR_PRESSSD[IN_FNAME]  = IFILE_AUX[3,IN_FNAME]
      NCDF_OUT.VAR_RHUMMU[IN_FNAME]   = IFILE_AUX[4,IN_FNAME]
      NCDF_OUT.VAR_RHUMSD[IN_FNAME]   = IFILE_AUX[5,IN_FNAME]
      NCDF_OUT.VAR_ZONALMU[IN_FNAME]  = IFILE_AUX[6,IN_FNAME]
      NCDF_OUT.VAR_ZONALSD[IN_FNAME]  = IFILE_AUX[7,IN_FNAME]
      NCDF_OUT.VAR_MERIDMU[IN_FNAME]  = IFILE_AUX[8,IN_FNAME]
      NCDF_OUT.VAR_MERIDSD[IN_FNAME]  = IFILE_AUX[9,IN_FNAME]
      NCDF_OUT.VAR_WVAPMU[IN_FNAME]   = IFILE_AUX[10,IN_FNAME]
      NCDF_OUT.VAR_WVAPSD[IN_FNAME]   = IFILE_AUX[11,IN_FNAME]

      CS_RHO[*,IN_BAND] = TOA_REF
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: END OF LOOP ON BAND - ',IN_BAND
		ENDFOR; END OF BAND ANALYSIS

;----------------------------------
 ; APPLY CLOUD SCREENING

      CS_MERIS = DIMITRI_CLOUD_SCREENING(SENSOR,MER_SITE_TYPE,CS_RHO,CS_GEO,'GLOBCARBON',VERBOSE=VERBOSE)
      IF CS_MERIS[0] GT TEMP_AUTO_CS THEN TEMP_AUTO_CS = DOUBLE(CS_MERIS[0])
  
      DB_DATA.AUTO_CS[IN_FNAME] = TEMP_AUTO_CS
      NCDF_OUT.VAR_CLOUD[IN_FNAME]  = TEMP_AUTO_CS

	NO_ROI:; IF ROI IS NOT WITHIN THE PRODUCT OR THERE ARE TOO FEW PIXELS
	IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: END OF LOOP ON PRODUCT'
	ENDFOR; END OF FILE ANALYSIS

;------------------------------------
; AMEND/SAVE DATA TO SAV FILE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: DEFINING OUTPUT ARRAY'
  NUM_NON_REF = 5+12
  NB_COLS = NUM_NON_REF+2*(NB_BANDS)

	SENSOR_L1B_REF          = DBLARR(NB_COLS,NB_FILES)
	IF NB_FILES EQ 1 THEN SENSOR_L1B_REF = REFORM(SENSOR_L1B_REF,NB_COLS,NB_FILES)
  SENSOR_L1B_REF[0,*]     = IFILE_DATE[4,*] ;UPDATED FROM DAY OF YEAR TO DECIMEL YEAR
  SENSOR_L1B_REF[1:4,*]   = IFILE_VIEW[*,*]
  SENSOR_L1B_REF[5:16,*]  = IFILE_AUX[*,*]
  SENSOR_L1B_REF[NUM_NON_REF:NUM_NON_REF+NB_BANDS-1,*]  = ROI_AVG_TOA_REF[*,*] 
  SENSOR_L1B_REF[NUM_NON_REF+NB_BANDS:NUM_NON_REF-1+2*NB_BANDS,*] = ROI_STD_TOA_REF[*,*] 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: AMMENDING DATA TO OUTPUT SAV FILE'
	TEMP = FILE_INFO(OUTPUT_SAV)
	IF TEMP.EXISTS EQ 1 THEN BEGIN
    TEMP_NEW = SENSOR_L1B_REF
    IF N_ELEMENTS(TEMP_NEW) EQ NB_COLS THEN TEMP_NEW = REFORM(TEMP_NEW,NB_COLS,NB_FILES)
    RESTORE,OUTPUT_SAV
    TEMP_OLD = SENSOR_L1B_REF
    IF N_ELEMENTS(TEMP_OLD) EQ NB_COLS THEN TEMP_OLD = REFORM(TEMP_OLD,NB_COLS,NB_FILES)
    RES_DIMS = SIZE(TEMP_OLD)
     
    SENSOR_L1B_REF = MAKE_ARRAY(NB_COLS,RES_DIMS[2]+NB_FILES,/DOUBLE)
    SENSOR_L1B_REF[*,0:RES_DIMS[2]-1] = TEMP_OLD
    SENSOR_L1B_REF[*,RES_DIMS[2]:RES_DIMS[2]+NB_FILES-1] = TEMP_NEW
           
	ENDIF
	
	RES = SORT(SENSOR_L1B_REF[0,*])
  SENSOR_L1B_REF = SENSOR_L1B_REF[*,RES]
	SAVE,SENSOR_L1B_REF,FILENAME=OUTPUT_SAV

;------------------------------------
; GENERATE PLOTS WITH NEW TIME SERIES DATA

  RES = GET_MERIS_TIMESERIES_PLOTS(OUTPUT_SAV,COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,VERBOSE=VERBOSE)
  
;------------------------------------
; SAVE DATA TO NETCDF FILE

  RES = DIMITRI_INTERFACE_EXTRACT_TOA_NCDF(NCDF_OUT,NCDF_FILENAME)  
    
;------------------------------------
;AMEND DATA TO DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MERIS L1B INGEST: SENDING DATA TO UPDATE DATABASE'
  RES = UPDATE_DIMITRI_DATABASE(DB_DATA,/SORT_DB,VERBOSE=VERBOSE)
 
	RETURN,1 
END
