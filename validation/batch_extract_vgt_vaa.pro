;-------------------------
; THIS PROGRAM EXTRACTS THE VGT VAA ANGLE
; HDF FILES FROM PARENT PRODUCTS TO THE 
; DIMITRI VALIDATION SITES
;-------------------------

PRO BATCH_EXTRACT_VGT_VAA

  STIME = SYSTIME()
  SITES = ['Amazon','BOUSSOLE','Libya4','TuzGolu','Uyuni']
  FOR IS=0,N_ELEMENTS(SITES)-1 DO BEGIN
    SITE = SITES[IS]
    CASE SITE OF
        'Amazon':BEGIN
                  ICOORDS = [1.33,1.0,-56.5,-57]
                  IFOLDER = '';THE MAIN FOLDER OF THE VGT ZIP FILES (NOT INCLUDING YEAR/MONTH/DAY BREAKDOWN)
                  OFOLDER = '/Amazon_extract/';THE LOCATION OF THE OUTPUT FOLDER (SHOULD BE CREATED ALREADY)
                 END
        'BOUSSOLE': BEGIN
                  ICOORDS = [43.45,43.25,8.0,7.8]
                  IFOLDER = '';THE MAIN FOLDER OF THE VGT ZIP FILES (NOT INCLUDING YEAR/MONTH/DAY BREAKDOWN)
                  OFOLDER = '/BOUSSOLE_extract/';THE LOCATION OF THE OUTPUT FOLDER (SHOULD BE CREATED ALREADY)
                 END
        'Libya4':BEGIN
                  ICOORDS = [29.05,28.05,23.89,22.89]
                  IFOLDER = '';THE MAIN FOLDER OF THE VGT ZIP FILES (NOT INCLUDING YEAR/MONTH/DAY BREAKDOWN)
                  OFOLDER = '/Libya4_extract/';THE LOCATION OF THE OUTPUT FOLDER (SHOULD BE CREATED ALREADY)
                 END
        'TuzGolu':BEGIN
                  ICOORDS = [38.80,38.70,33.40,33.25]
                  IFOLDER = '';THE MAIN FOLDER OF THE VGT ZIP FILES (NOT INCLUDING YEAR/MONTH/DAY BREAKDOWN)
                  OFOLDER = '/TuzGolu_extract/';THE LOCATION OF THE OUTPUT FOLDER (SHOULD BE CREATED ALREADY)
                 END
        'Uyuni':BEGIN
                  ICOORDS = [-20.00,-20.16,-67.45,-68.05]
                  IFOLDER = '';THE MAIN FOLDER OF THE VGT ZIP FILES (NOT INCLUDING YEAR/MONTH/DAY BREAKDOWN)
                  OFOLDER = '/Uyuni_extract\';THE LOCATION OF THE OUTPUT FOLDER (SHOULD BE CREATED ALREADY)
                 END
    ENDCASE
    RES = EXTRACT_VGT_VAA(IFOLDER,OFOLDER,ICOORDS)
  ENDFOR

  PRINT,'START: ',STIME
  PRINT,'END  : ',SYSTIME()
  PRINT, 'COMPLETED VAA EXTRACTION PROCESSING'

END


FUNCTION EXTRACT_VGT_VAA,IFOLDER,OFOLDER,ICOORDS


  DL = PATH_SEP()
  IF STRUPCASE(!VERSION.OS_FAMILY) EQ 'WINDOWS' THEN CMMD = '7z e -aoa ' ELSE CMMD = '7za e -aoa '

  YEARS  = ['2003','2004','2005','2006','2007','2008','2009']
  MONTHS = ['01','02','03','04','05','06','07','08','09','10','11','12']
  DAYS   = ['01','02','03','04','05','06','07','08','09','10','11','12',$
            '13','14','15','16','17','18','19','20','21','22','23','24',$
            '25','26','27','28','29','30','31']
  SSTR = '*.ZIP'

  FOR IY=0,N_ELEMENTS(YEARS)-1  DO BEGIN
  FOR IM=0,N_ELEMENTS(MONTHS)-1 DO BEGIN
  FOR ID=0,N_ELEMENTS(DAYS)-1   DO BEGIN

    CD,CURRENT=CDIR
    TFOLDER = IFOLDER+DL+YEARS[IY]+DL+MONTHS[IM]+DL+DAYS[ID]+DL
    IF NOT FILE_TEST(TFOLDER,/DIRECTORY) THEN GOTO,NEXT_ITER
    CD,TFOLDER  
 
    ZIPFILES = FILE_SEARCH(SSTR)
    IF ZIPFILES[0] EQ '' THEN GOTO,NEXT_ITER
  
    FOR IZ=0,N_ELEMENTS(ZIPFILES)-1 DO BEGIN
      IF STRUPCASE(!VERSION.OS_FAMILY) EQ 'WINDOWS' THEN BEGIN
      SPAWN,CMMD+ZIPFILES[IZ]+' 0001/0001_LOG.TXT',/HIDE
      SPAWN,CMMD+ZIPFILES[IZ]+' 0001/0001_VAA.HDF',/HIDE
      ENDIF ELSE BEGIN
      SPAWN,CMMD+ZIPFILES[IZ]+' 0001/0001_LOG.TXT'
      SPAWN,CMMD+ZIPFILES[IZ]+' 0001/0001_VAA.HDF'      
      ENDELSE
  
      ADDNAME = STRMID(ZIPFILES[IZ],0,STRLEN(ZIPFILES[IZ])-4)
      LOGF = '0001_LOG.TXT'
      GEOLOC = GET_VEGETATION_LAT_LON(LOGF)
    
      LAT_ROW = WHERE(GEOLOC.LAT LT ICOORDS[0] AND GEOLOC.LAT GT ICOORDS[1])
      LON_COL = WHERE(GEOLOC.LON LT ICOORDS[2] AND GEOLOC.LON GT ICOORDS[3])
      IF LAT_ROW[0] EQ -1 OR  LON_COL[0] EQ -1 THEN GOTO, NEXT_ZIP
    
      IVAA ='0001_VAA.HDF'
      OVAA = OFOLDER+DL+ADDNAME+'_0001_VAA.HDF'
      
      IF FILE_TEST(OVAA) EQ 1 THEN FILE_DELETE,OVAA
      HDFID = HDF_SD_START(IVAA, /READ)
      SD_ID = HDF_SD_SELECT(HDFID,0)
      HDF_SD_GETDATA, SD_ID, DATA
      HDF_SD_ENDACCESS, SD_ID
      HDF_SD_END, HDFID
      DIMS = SIZE(DATA)
    
      NEW_LAT_INDEXES = [LAT_ROW[0],LAT_ROW[N_ELEMENTS(LAT_ROW)-1]]
      NEW_LON_INDEXES = [LON_COL[0],LON_COL[N_ELEMENTS(LON_COL)-1]]
      Y_R=8.*CEIL((2+NEW_LAT_INDEXES[1]-NEW_LAT_INDEXES[0])/8.) < DIMS(2)*8-1
      X_R=8.*CEIL((2+NEW_LON_INDEXES[1]-NEW_LON_INDEXES[0])/8.) < DIMS(1)*8-1
      TOPVALY = NEW_LAT_INDEXES[0]+Y_R < DIMS(2)*8-1
      TOPVALX = NEW_LON_INDEXES[0]+X_R < DIMS(1)*8-1

      INTERPOLATED_DATA = REBIN(DATA,DIMS(1)*8,DIMS(2)*8)      
      EXTRACT_DATA = INTERPOLATED_DATA[NEW_LON_INDEXES[0]:TOPVALX,NEW_LAT_INDEXES[0]:TOPVALY]
      
      REBIN_DATA = CONGRID(EXTRACT_DATA,(X_R/8)>1,(Y_R/8)>1)
      HDFID = HDF_SD_START(OVAA, /CREATE)
      SD_ID = HDF_SD_CREATE(HDFID, 'ANGLES_VALUES',[(X_R/8)>1,(Y_R/8)>1])
      HDF_SD_ADDDATA, SD_ID, REBIN_DATA 
      HDF_SD_ENDACCESS, SD_ID
      HDF_SD_END, HDFID
    
      FILE_DELETE,IVAA
      FILE_DELETE,LOGF
      NEXT_ZIP:
    ENDFOR
    NEXT_ITER:
    CD,CDIR
  ENDFOR
  ENDFOR
  ENDFOR
  
END

;;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_VEGETATION_LAT_LON      
;* 
;* PURPOSE:
;*      RETIREVES THE L1B LAT LON FROM A VEGETATION LOG FILE
;* 
;* CALLING SEQUENCE:
;*      RES = GET_VEGETATION_LAT_LON(LOG_FILE)      
;* 
;* INPUTS:
;*      LOG_FILE   -  THE FULL PATH OF THE PRODUCTS LOG FILE     
;*
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STRUCT.LAT  - DERIVED PRODUCT LATITUDE
;*      STRUCT.LON  - DERIVED PRODUCT LONGITUDE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        17 DEC 2010 - C KENT    - DIMITRI-2 V1.0
;*
;* VALIDATION HISTORY:
;*        02 DEC 2010 - C KENT    - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        06 JAN 2011 - C KENT    - LINUX 64-BIT MACHINE IDL 8.0: COMPILATION SUCCESSFUL, 
;*                                  NO APPARENT DIFFERENCES WHEN COMPARED TO WINDOWS MACHINE
;*
;**************************************************************************************
;**************************************************************************************

;**********THIS IS A MODIFIED VERSION - SHOULD NOT BE USED FOR ACTUAL DIMITRI PROCESSING!!!******

FUNCTION GET_VEGETATION_LAT_LON,LOG_FILE,VERBOSE=VERBOSE

;-------------------------------------------
; CHECK FILE EXISTS

  IF STRCMP(STRING(LOG_FILE),'') THEN BEGIN
    PRINT, 'VEGETATION LAT LON: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  

;-------------------------------------------
; CHECK FILES EXIST

  TEMP = FILE_INFO(LOG_FILE)
  IF TEMP.EXISTS EQ 0 THEN BEGIN
    PRINT, 'VEGETATION LAT LON: ERROR, LAT/LON FILE DOES NOT EXIST'
    RETURN,{ERROR:-1}
  ENDIF  

;-------------------------------------------
; READ LOG FILE IN AS A BINARY STRING

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: READING LOG FILE'
  TEMP_LOG = READ_BINARY(LOG_FILE)
  TEMP_LOG = STRING(TEMP_LOG)

;-------------------------------------------  
; GET MAX AND MIN LAT AND LON VALUES

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: RETRIEVING MAX AND MIN LAT/LON'
  POS = STRPOS(TEMP_LOG,'GEO_UPPER_LEFT_LAT')
    NORTH_LAT = STRMID(TEMP_LOG,POS+26,11)+0.0
  POS = STRPOS(TEMP_LOG,'GEO_LOWER_RIGHT_LAT')
    SOUTH_LAT = STRMID(TEMP_LOG,POS+26,11)+0.0
  POS = STRPOS(TEMP_LOG,'GEO_UPPER_LEFT_LONG')
    WEST_LON = STRMID(TEMP_LOG,POS+26,11)+0.0
  POS = STRPOS(TEMP_LOG,'GEO_LOWER_RIGHT_LONG')
    EAST_LON = STRMID(TEMP_LOG,POS+26,11)+0.0   

;-------------------------------------------
; GET IMAGE SIZE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: RETRIEVING PIXEL IMAGE SIZE'
  POS = STRPOS(TEMP_LOG,'IMAGE_LOWER_RIGHT_ROW')
  POS2 = STRPOS(TEMP_LOG,'IMAGE_LOWER_RIGHT_COL')
  POS3 = STRPOS(TEMP_LOG,'IMAGE_LOWER_LEFT_ROW')
  NUM_PIX_Y = STRMID(TEMP_LOG,POS+26,POS2-POS-26)+0l   
  NUM_PIX_X = STRMID(TEMP_LOG,POS2+26,POS3-POS2-26)+0l   

;-------------------------------------------
; CALCULATE LAT GRADIENT OVER COLUMN 0

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: DEFINE LAT AND LON GRIDS'
  NEW_GRID_LAT = MAKE_ARRAY(NUM_PIX_Y,/FLOAT)
  NEW_GRID_LON = MAKE_ARRAY(NUM_PIX_X,/FLOAT)

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: INTERPOLATE BETWEEN MAX AND MIN LATITUDES'
  GRAD = (SOUTH_LAT - NORTH_LAT)/NUM_PIX_Y
  FOR I=0l,NUM_PIX_Y-1 DO NEW_GRID_LAT[I] = NORTH_LAT+GRAD*I

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION LAT LON: INTERPOLATE BETWEEN MAX AND MIN LONGITUDES'
  GRAD = (EAST_LON - WEST_LON)/NUM_PIX_X
  FOR I=0l,NUM_PIX_X-1 DO NEW_GRID_LON[I] = WEST_LON+GRAD*I

;-------------------------------------------
; RETURN GEOLOCAITON INFORMATION

  RETURN,{LAT:NEW_GRID_LAT,LON:NEW_GRID_LON}

END