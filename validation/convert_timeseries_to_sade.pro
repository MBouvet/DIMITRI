PRO CONVERT_TIMESERIES_TO_SADE,SENSOR_CONFIG,SENSOR_DATA,numpixs,BANDS_INDEX,NUM_DIRECTIONS,SITE,ICOORDS

;NEED INPUT = SENSOR, BANDS INDEX, NUM DIRECTIONS,SITENAME AND ICOORDS
;INPUT TIME SERIES WILL BE OF FORM
;[PARAMS,OBSERVATIONS]
;------------------------------
; NOTE, WILL NEED TO ADD COMPUTATION OF INDIVIDUAL PARASOL VIEWING GEOMETRIES....
; PROBABLY AS A DIFFERENT FUNCTION
; ALSO NEED TO MAKE SURE ANGLES ARE 0-360 FOR AZIMUTH
;------------------------------

;-----------------------------
; DEFINE OUTPUT FILE - MAKE SURE YOU ARE NI CORRECT CD

  OUTPUTFILE = SITE+'_'+SENsor_CONFIG+'.SADE'
  OPENW,OUTF,OUTPUTFILE,/GET_LUN

;------------------------------
; GET SITE LAT AND LON FORM ICOORDS 

  SITE_LAT = MEAN(ICOORDS[0:1])
  SITE_LON = MEAN(ICOORDS[2:3])

;------------------------------
; ASSUME IF THERE ARE MULTIPLE DIRECTIONS THAT THE OBSERVATIONS ARE NEXT TO EACH OTHER
; GET NUMBER OF INDIVICUAL OBSERVATIONS (NUM VALUES DIVIDED BY DIRECTIONS)

  NOVAL     = -999.
  NUMNONREF = 5+12
  NBANDS    = N_ELEMENTS(BANDS_INDEX)
  NOBSERS   = N_ELEMENTS(SENSOR_DATA[0,*]) 
  NINOBS   = FLOAT(NOBSERS)/FLOAT(NUM_DIRECTIONS)
  NVALS     = NBANDS*NUM_DIRECTIONS
  vzaid = 1
  vaaid = 2
  szaid = 3
  saaid = 4

  IF ABS(NINOBS-long(NINOBS)) GT 0. THEN BEGIN
    PRINT, 'ERROR, NOT ALL DIRECTIONS ARE PRESENT'
    RETURN ;MAYBE JUST FILL THESE IN AS EMPTY THEN?
  ENDIF

;------------------------------
; LOOP OVER EACH IND OBS
  
  FOR II=0l,NOBSERS-1,NUM_DIRECTIONS DO BEGIN

;------------------------------
; CONVERT TIME FROM DECIMAL TO DD/MM/YYYY-HH:MM:SS, AND TODAYS DATE AS THE PROCESSING TIME STRING
  
    ACQ_TIME    = SENSOR_DATA[0,II]
    ;TTIME       = ACQ_TIME+DOUBLE(JULDAY(1, 0, FLOOR(ACQ_TIME), 0, 0, 0))
    if floor(acq_time) mod 4 eq 0 then diy=366 else diy=365
    ttime = diy*(acq_time-floor(acq_time))+DOUBLE(JULDAY(1, 0, FLOOR(ACQ_TIME), 0, 0, 0))
    CALDAT,TTIME,MONTH,DAY,YEAR,HOUR,MINUTE,SECOND
    
    MONTH       = MONTH Lt 10. ?  '0'+STRTRIM(STRING(MONTH,FORMAT='(I)'),2) : STRTRIM(STRING(MONTH,FORMAT='(I)'),2)
    DAY         = DAY Lt 10. ? '0'+STRTRIM(STRING(DAY,FORMAT='(I)'),2) : STRTRIM(STRING(DAY,FORMAT='(I)'),2)
    YEAR        = STRTRIM(STRING(YEAR,FORMAT='(I)'),2)
    HOUR        = HOUR Lt 10. ? '0'+STRTRIM(STRING(HOUR,FORMAT='(I)'),2) : STRTRIM(STRING(HOUR,FORMAT='(I)'),2)
    MINUTE      = MINUTE Lt 10. ? '0'+STRTRIM(STRING(MINUTE,FORMAT='(I)'),2) : STRTRIM(STRING(MINUTE,FORMAT='(I)'),2)
    SECOND      = SECOND Lt 10. ? '0'+STRTRIM(STRING(SECOND,FORMAT='(I)'),2) : STRTRIM(STRING(SECOND,FORMAT='(I)'),2)
    
    ACQ_STRING  = DAY+'/'+MONTH+'/'+YEAR+'-'+HOUR+':'+MINUTE+':'+SECOND
    PROC_STRING = ACQ_STRING;FOR NOW

;------------------------------
; GET TOA REFLECTANCE, STDEV AND VZA AND VAA

    TOA_REF = SENSOR_DATA[NUMNONREF+BANDs_INDEX,II]
    TOA_STD = SENSOR_DATA[NUMNONREF+NBANDS+BANDs_INDEX,II]
  
    VZA = MAKE_ARRAY(NBANDS,/FLOAT,VALUE=SENSOR_DATA[VZAID,II])
    VAA = MAKE_ARRAY(NBANDS,/FLOAT,VALUE=SENSOR_DATA[VAAID,II])
  
    IF NUM_DIRECTIONS GT 1 THEN BEGIN
      FOR JJ=1,NUM_DIRECTIONS-1 DO BEGIN
        TOA_REF = [TOA_REF,SENSOR_DATA[NUMNONREF+BANDs_INDEX,II+JJ]]
        TOA_STD = [TOA_STD,SENSOR_DATA[NUMNONREF+NBANDS+BANDs_INDEX,II+JJ]]
        VZA     = [VZA,MAKE_ARRAY(NBANDS,/FLOAT,VALUE=SENSOR_DATA[VZAID,II+JJ])]
        VAA     = [VAA,MAKE_ARRAY(NBANDS,/FLOAT,VALUE=SENSOR_DATA[VAAID,II+JJ])]
      ENDFOR
    ENDIF
  
    RES = WHERE(TOA_REF LT 0.,COUNT)
    IF COUNT GT 0 THEN TOA_REF[RES] = NOVAL
    RES = WHERE(TOA_STD LT 0.,COUNT)
    IF COUNT GT 0 THEN TOA_STD[RES] = NOVAL

;------------------------------
; GET SZA AND SAA AND NUMBER OF PIXELS

    PIX = numpixs[II]
    SZA = SENSOR_DATA[SZAID,II]
    SAA = SENSOR_DATA[SAAID,II]

;------------------------------
; PRINT ALL DATA AS AN INDIVIDUAL LINE, SPACE DELIMITED, TO THE OUTPUTFILE

    PRINTF,OUTF,SENSOR_CONFIG,ACQ_STRING,PROC_STRING,SITE,TOA_REF,TOA_STD,$
      VZA,VAA,PIX,SITE_LAT,SITE_LON,SZA,SAA,$
      FORMAT = '(4(A,1H ),'+STRTRIM(FIX(4*NVALS),2)+'(F10.6,1H ),1(F15.1,1H ),3(F10.6,1H ),1(F10.6))'

  ENDFOR

;------------------------------
; CLOSE THE OUTPUT FILE

  FREE_LUN,OUTF

;------------------------------
; PRINT END STRING

  PRINT, 'COMPLETED SADE CONVERSION'

END