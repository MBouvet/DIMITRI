;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      DIMITRI_VISUALISATION_ANGLES     
;* 
;* PURPOSE:
;*      THIS PROGRAM AUTOMATICALLY SERACHES AND RETRIEVES THE DOUBLET ANGLE 
;*      INFORMATION OUTPUT BY DMIITRI GIVEN AN OUTPUT FOLDER AND REFERENCE 
;*      SENSOR CONFIGURATION.
;* 
;* CALLING SEQUENCE:
;*      RES = DIMITRI_VISUALISATION_ANGLES(ED_FOLDER,VA_REGION,REF_SENSOR,REF_PROC_VER)      
;*
;* INPUTS:
;*      ED_FOLDER     - A STRING OF THE FULL PATH FOR THE DOUBLET_EXTRACTION OUTPUT FOLDER
;*      VA_REGION     - A STRING OF THE DIMITRI VALIDATION SITE REQUESTED
;*      REF_SENSOR    - A STRING OF THE REFERENCE SENSOR UTILISED FOR PROCESSING
;*      REF_PROC_VER  - A STRING OF THE REFERENCE SENSOR'S PROCESSING VERSION 
;*
;* KEYWORDS:
;*      VERBOSE - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      A STRUCTURE WITH THE FOLLOWING TAGS:
;*      ERROR             - THE ERROR STATUS CODE, 0 = NOMINAL, 1 OR -1 = ERROR
;*      DATA              - AN ARRAY CONTAINING ALL GEOMETRY ANGLES [VZA,VAA,SZA,SAA]
;*      NUM_SENS_CONFIGS  - NUMBER OF SENSOR CONFIGURATIONS FOUND
;*      SENSOR_CONFIGS    - A STRING OF THE SENSOR CONFIGURATIONS FOUND
;*      SENS_CONFIG_ABLE  - AN INTEGER ARRAY DESCRIBING IF DATA IS AVAILABLE FOR A
;*                          CERTAIN SENSOR CONFIGURATION
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*      08 FEB 2011 - C KENT    - DIMITRI-2 V1.0
;*      25 AUG 2011 - C KENT    - REMOVED ANGULAR CORRECTION AS NOW IMPLEMENTED DURING INGESTION
;*
;* VALIDATION HISTORY:
;*      08 FEB 2011 - C KENT    - WINDOWS 32-BIT MACHINE IDL 7.1/IDL 8.0: NOMINAL 
;*      14 APR 2011 - C KENT    - WINDOWS 32-BIT IDL 7.1 AND LINUX 64-BIT IDL 8.0 NOMINAL
;*                                COMPILATION AND OPERATION
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION DIMITRI_VISUALISATION_ANGLES,ED_FOLDER,VA_REGION,REF_SENSOR,REF_PROC_VER,VERBOSE=VERBOSE

;--------------------------------
; FIND ALL CORRESPONDING DOUBLET 
; EXTRACTION FILES 
  
  REF_STR = 'ED_'+VA_REGION+'_'+REF_SENSOR+'_'+REF_PROC_VER+'*.dat'
  CAL_STR = 'ED_'+VA_REGION+'_*'+REF_SENSOR+'_'+REF_PROC_VER+'.dat'

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: SEARCHING FOR DOUBLET DATA'
  REF_FILES = FILE_SEARCH(ED_FOLDER,REF_STR)
  CAL_FILES = FILE_SEARCH(ED_FOLDER,CAL_STR)
  
  IF STRCMP(REF_FILES[0],'') EQ 1 OR $
     STRCMP(CAL_FILES[0],'') EQ 1 OR $
     (N_ELEMENTS(REF_FILES) NE N_ELEMENTS(CAL_FILES)) THEN BEGIN
    PRINT, 'DIMITRI_VISU_ANGL: ERROR, NO DOUBLET DATA FOUND'
    RETURN,{ERROR:1}
  ENDIF

;--------------------------------
; GET THE NUMBER OF REFERENCE/CALIBRATION 
; FILES AVAILABLE     
  
  NUM_REF_CONFIGS   = N_ELEMENTS(REF_FILES)
  NUM_CAL_CONFIGS   = N_ELEMENTS(CAL_FILES)
  NUM_SENS_CONFIGS  = 1+NUM_CAL_CONFIGS

;--------------------------------
; START LIST OF ALL SENSOR AND 
; PROCESSING VERSION CONFIGURATIONS, 
; AND REFERENCE SENSOR DATES AND 
; REFLECTANCE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: DEFINING SENSOR CONFIGURAITON ARRAY'
  SENSOR_CONFIGS  = STRING(REF_SENSOR+'_'+REF_PROC_VER)
  SENS_CONFIG_ABLE= MAKE_ARRAY(N_ELEMENTS(NUM_SENS_CONFIGS),/INTEGER,VALUE=0)
  SENS_CONFIG_ABLE[0] = 1
  TMP_REF_DATE    = DOUBLE(0.0)
  TMP_REF_VZA     = TMP_REF_DATE & TMP_REF_VAA = TMP_REF_DATE
  TMP_REF_SZA     = TMP_REF_DATE & TMP_REF_SAA = TMP_REF_DATE

;-------------------------------- 
; CONCATENATE DATE AND REFLECTANCE 
; INFO FOR REFERENCE SENSOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: CONCATENATING REFERENCE SENSOR INFORMATION'  
  NUM_NON_REFS = 5+12
  FOR ITEMP=0,NUM_REF_CONFIGS-1 DO BEGIN
    RESTORE,REF_FILES[ITEMP]
    TEMP_ELEMENTS = N_ELEMENTS(ED_SENSOR1_SENSOR2[0,*])
    TMP_REF_DATE  = [TMP_REF_DATE,REFORM(DOUBLE(ED_SENSOR1_SENSOR2[0,*]),TEMP_ELEMENTS)]
    TMP_REF_VZA   = [TMP_REF_VZA, REFORM(DOUBLE(ED_SENSOR1_SENSOR2[1,*]),TEMP_ELEMENTS)]
    TMP_REF_VAA   = [TMP_REF_VAA, REFORM(DOUBLE(ED_SENSOR1_SENSOR2[2,*]),TEMP_ELEMENTS)]
    TMP_REF_SZA   = [TMP_REF_SZA, REFORM(DOUBLE(ED_SENSOR1_SENSOR2[3,*]),TEMP_ELEMENTS)]
    TMP_REF_SAA   = [TMP_REF_SAA, REFORM(DOUBLE(ED_SENSOR1_SENSOR2[4,*]),TEMP_ELEMENTS)]
  ENDFOR

;--------------------------------
; SORT VALUES INTO ASCENDING TIME

  TEMP = SORT(TMP_REF_DATE)
  TMP_REF_DATE  = TMP_REF_DATE[TEMP[1:N_ELEMENTS(TEMP)-1]]
  TMP_REF_VZA   = TMP_REF_VZA [TEMP[1:N_ELEMENTS(TEMP)-1]]
  TMP_REF_VAA   = TMP_REF_VAA [TEMP[1:N_ELEMENTS(TEMP)-1]]
  TMP_REF_SZA   = TMP_REF_SZA [TEMP[1:N_ELEMENTS(TEMP)-1]]
  TMP_REF_SAA   = TMP_REF_SAA [TEMP[1:N_ELEMENTS(TEMP)-1]]
  NUM_REF_DATE  = N_ELEMENTS(TMP_REF_DATE)

;--------------------------------  
; CREATE AN ARRAY TO HOLD ALL TIME 
; AND ANGULAR DATA FOR EACH 
; SENSOR CONFIGURATION FOUND

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: DEFINING ARRAY TO HOLD ALL ANGLE DATA'
  ANGL_DATA         = MAKE_ARRAY(NUM_REF_DATE,NUM_SENS_CONFIGS,5,/DOUBLE)
  ANGL_DATA[*,0,0]  = TMP_REF_DATE
  ANGL_DATA[*,0,1]  = TMP_REF_VZA   
  ANGL_DATA[*,0,2]  = TMP_REF_VAA
  ANGL_DATA[*,0,3]  = TMP_REF_SZA
  ANGL_DATA[*,0,4]  = TMP_REF_SAA
 
;-------------------------------- 
; RESTORE CAL FILES AND STORE 
; THE DATA  

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: STARTING LOOP ON ALL CAL-SENSOR FILES'
  FOR I=0,NUM_CAL_CONFIGS-1 DO BEGIN

;-------------------------------- 
; GET SENSOR CONFIGURATION FROM FILENAME

    POS   = STRPOS(CAL_FILES[I],VA_REGION,/REVERSE_SEARCH)+STRLEN(VA_REGION)+1
    POS1  = STRPOS(CAL_FILES[I],REF_SENSOR,/REVERSE_SEARCH)-1
    TMP   = STRMID(CAL_FILES[I],POS,POS1-POS)
    SENSOR_CONFIGS = [SENSOR_CONFIGS,TMP]
    RESTORE,CAL_FILES[I] 
   
    TEMP_ELEMENTS = N_ELEMENTS(ED_SENSOR2_SENSOR1[0,*])
    FOR J=0,4 DO ANGL_DATA[0:TEMP_ELEMENTS-1,I+1,J] = DOUBLE(ED_SENSOR2_SENSOR1[J,*])
  ENDFOR
  
;--------------------------------
; RETURN ALL DATA IN A STRUCTURE

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'DIMITRI_VISU_ANGL: RETURNING ANGLES DATA STRUCTURE'

  VISU_ANGL = {                                             $
              ERROR:0                                       ,$
              DATA:ANGL_DATA                                ,$
              NUM_SENS_CONFIGS:NUM_SENS_CONFIGS             ,$
              SENSOR_CONFIGS:SENSOR_CONFIGS                 ,$
              SENS_CONFIG_ABLE:SENS_CONFIG_ABLE             $
              }

  RETURN,VISU_ANGL

END