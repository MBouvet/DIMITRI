;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_VEGETATION_VIEWING_GEOMETRIES      
;* 
;* PURPOSE:
;*      RETIREVES THE L1B OBSERVATION AND ILLUMINATION GEOMETRIES FROM A VEGETATION LOG FILE
;* 
;* CALLING SEQUENCE:
;*      RES = GET_VEGETATION_VIEWING_GEOMETRIES(LOG_FILE)      
;* 
;* INPUTS:
;*      LOG_FILE   -  THE FULL PATH OF THE PRODUCTS LOG FILE     
;*
;* KEYWORDS:
;*      VERBOSE    - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      VGEO[X,Y,M] - ARRAY CONTAINING THE PRODUCTS SOLAR ZENITH ANGLE, SOLAR AZIMUTH ANGLE
;*                    SENSOR ZENITH ANGLE, AND SENSOR AZIMUTH ANGLE
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        17 DEC 2010 - C KENT    - DIMITRI-2 V1.0
;*
;* VALIDATION HISTORY:
;*        02 DEC 2010 - C KENT    - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        06 JAN 2011 - C KENT    - LINUX 64-BIT MACHINE IDL 8.0: COMPILATION SUCCESSFUL, 
;*                                  NO APPARENT DIFFERENCES WHEN COMPARED TO WINDOWS MACHINE
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_VEGETATION_VIEWING_GEOMETRIES,LOG_FILE,VERBOSE=VERBOSE

;----------------------------------------
; CHECK FILE EXISTS

  IF STRCMP(STRING(LOG_FILE),'') THEN BEGIN
    PRINT, 'VEGETATION VIEWING GEOMETRIES: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  

;----------------------------------------
;CONVERT TO REFLECTANCE FILENAMES

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: DEFINING TEMPORARY ARRAYS TO HOLD DATA'
  NB_BANDS=4
  TEMP = STRLEN(LOG_FILE)
  REF_FILES = STRARR(NB_BANDS)
  REF_FILES[0] = STRING(STRMID(LOG_FILE,0,TEMP-7)+'SZA.HDF')
  REF_FILES[1] = STRING(STRMID(LOG_FILE,0,TEMP-7)+'SAA.HDF')
  REF_FILES[2] = STRING(STRMID(LOG_FILE,0,TEMP-7)+'VZA.HDF')
  REF_FILES[3] = STRING(STRMID(LOG_FILE,0,TEMP-7)+'VAA.HDF')

;----------------------------------------  
; CONVERSION FACTOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: DEFINING CONVERSION FACTORS'
  SZA_SF = 0.5
  SAA_SF = 1.5
  VZA_SF = 0.5
  VAA_SF = 1.5

;----------------------------------------  
; READ LOG FILE IN AS A BINARY STRING

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: READING LOG FILE AND RETRIEVING X AND Y PIXEL NUMBERS'
  TEMP_LOG = READ_BINARY(LOG_FILE)
  TEMP_LOG = STRING(TEMP_LOG)

 POS = STRPOS(TEMP_LOG,'IMAGE_LOWER_RIGHT_ROW')
    NUM_PIX_Y = STRMID(TEMP_LOG,POS+26,3)+0.0   
 POS = STRPOS(TEMP_LOG,'IMAGE_LOWER_RIGHT_COL')
    NUM_PIX_X = STRMID(TEMP_LOG,POS+26,3)+0.0 

;------------------------------------------------
; RETRIEVE SZA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: RETRIEVING SZA'
  HDF_ID = HDF_SD_START(REF_FILES[0],/READ)
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'ANGLES_VALUES')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,SZA
  HDF_SD_ENDACCESS, SDS_ID
  HDF_SD_END,HDF_ID

;------------------------------------------------
; RETRIEVE SAA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: RETRIEVING SAA'
  HDF_ID = HDF_SD_START(REF_FILES[1],/READ)
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'ANGLES_VALUES')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,SAA
  HDF_SD_ENDACCESS, SDS_ID
  HDF_SD_END,HDF_ID

;------------------------------------------------
; RETRIEVE VZA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: RETRIEVING VZA'
  HDF_ID = HDF_SD_START(REF_FILES[2],/READ)
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'ANGLES_VALUES')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,VZA
  HDF_SD_ENDACCESS, SDS_ID
  HDF_SD_END,HDF_ID

;------------------------------------------------
; RETRIEVE VAA

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: RETRIEVING VAA'
  HDF_ID = HDF_SD_START(REF_FILES[3],/READ)
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'ANGLES_VALUES')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,VAA
  HDF_SD_ENDACCESS, SDS_ID
  HDF_SD_END,HDF_ID

;----------------------------------------
; INTERPOLATE TO RADIANCE GRID

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: INTERPOLATING TO RADIANCE GRID '
  SZA = CONGRID(SZA,NUM_PIX_X,NUM_PIX_Y,/INTERP,/MINUS_ONE)
  SAA = CONGRID(SAA,NUM_PIX_X,NUM_PIX_Y,/INTERP,/MINUS_ONE)
  VZA = CONGRID(VZA,NUM_PIX_X,NUM_PIX_Y,/INTERP,/MINUS_ONE)
  VAA = CONGRID(VAA,NUM_PIX_X,NUM_PIX_Y,/INTERP,/MINUS_ONE)

;-----------------------------------------------
; DEFINE OUTPUT ARRAY

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION VIEWING GEOMETRIES: CONVERTING USING SCALING FACTORS'
  VGEO = MAKE_ARRAY(NUM_PIX_X,NUM_PIX_Y,NB_BANDS,/FLOAT)
  VGEO[*,*,0] = FLOAT(SZA*SZA_SF)
  VGEO[*,*,1] = FLOAT(SAA*SAA_SF)
  VGEO[*,*,2] = FLOAT(VZA*VZA_SF)
  VGEO[*,*,3] = FLOAT(VAA*VAA_SF)

;---------------------------------------- 
 ; RETURN GEOLOCAITON INFORMATION

  RETURN,VGEO

END