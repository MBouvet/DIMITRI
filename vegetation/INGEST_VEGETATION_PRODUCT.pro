;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INGEST_VEGETATION_PRODUCT       
;* 
;* PURPOSE:
;*      INGESTS VEGETATION L1B DATA INTO DIMITRI DATABASE. MULTIPLE PRODUCT 
;*	    EXTRACTION IS AVAILABLE BUT IT EXPECTS ALL FILES TO BE THE SAME REGION/PROCESSING. 
;*      OUTPUTS QUICKLOOK IMAGES, UPDATES DATABASE AND APPENDS DATA TO SAV FILE FOR 
;*      SPECIFIED REGION AND PROCESSING.
;* 
;* CALLING SEQUENCE:
;*      RES = INGEST_VEGETATION_PRODUCT(IFILES)      
;* 
;* INPUTS:
;*      IFILES -  A STRING OR STRING ARRAY OF THE FULL PATH FILENAMES OF PRODUCTS (LOG FILES) 
;*                FOR INGESTION.      
;*
;* KEYWORDS:
;*      INPUT_FOLDER      - A STRING CONTAINING THE FULL PATH OF THE 'INPUT' FOLDER, IF 
;*                          NOT PROVIDED THEN IT IS DERIVED FROM THE FILENAME
;*      ICOORDS           - A FOUR ELEMENT FLOATING-POINT ARRAY CONTAINING THE NORTH, SOUTH, 
;*                          EAST AND WEST COORDINATES OF THE ROI, E.G [50.,45.,10.,0.]
;*      NB_PIX_THRESHOLD  - NUMBER OF PIXELS WITHIN ROI TO BE ACCEPTED
;*      ENDIAN_SZE        - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG), IF NOT PROVIDED 
;*                          THEN COMPUTED.
;*      COLOUR_TABLE      - USER DEFINED IDL COLOUR TABLE INDEX (DEFAULT IS 39)
;*      PLOT_XSIZE        - WIDTH OF GENERATED PLOTS (DEFAULT IS 700PX)
;*      PLOT_YSIZE        - HEIGHT OF GENERATED PLOTS (DEFAULT IS 400PX)
;*      NO_ZBUFF          - IF SET THEN PLOTS ARE GENERATED IN WINDOWS AND NOT 
;*                          WIHTIN THE Z-BUFFER.
;*      NO_QUICKLOOK      - IF SET THEN QUICKLOOKS ARE NOT GENERATED FOR IFILES.
;*      VERBOSE           - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        16 DEC 2010 - C KENT    - DIMITRI-2 V1.0
;*        20 DEC 2010 - C KENT    - UPDATED COMMENTS AND HEADER INFORMATION
;*        10 JAN 2011 - C KENT    - CHANGED SAVED OUTPUT VARIABLE TO SENSOR_L1B_REF 
;*        12 JAN 2011 - C KENT    - OUTPUT RGB QUICKLOOKS AS DEFUALT, UPDATED OUTPUT DATA 
;*                                  WITH SAA AND VAA (REMOVED RAA)
;*        21 MAR 2011 - C KENT    - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*        22 MAR 2011 - C KENT    - ADDED CONFIGURAITON FILE DEPENDENCE
;*        06 APR 2011 - C KENT    - ADD VGT AUTOMATED CLOUD SCREENING
;*        01 JUL 2011 - C KENT    - ADDED ANGLE CORRECTOR
;*        04 JUL 2011 - C KENT    - ADDED AUX INFO TO OUTPUT SAV
;*        08 JUL 2011 - C KENT    - ADDED CATCH ON MISSING BAND DATA   
;*        14 JUL 2011 - C KENT    - UPDATED TIME EXTRACTION SECTION
;*        14 SEP 2011 - C KENT    - UPDATED NETCDF OUTPUT
;*        19 SEP 2011 - C KENT    - FIXED OZONE AND WVAP ARRAY BUG
;*
;* VALIDATION HISTORY:
;*        16 DEC 2010 - C KENT    - WINDOWS 32BIT MACHINE, COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        12 APR 2011 - C KENT    - LINUX 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INGEST_VEGETATION_PRODUCT,IFILES,INPUT_FOLDER=INPUT_FOLDER,ICOORDS=ICOORDS,$
         COLOUR_TABLE=COLOUR_TABLE,$
         PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,NO_ZBUFF=NO_ZBUFF,NO_QUICKLOOK=NO_QUICKLOOK,$
         VERBOSE=VERBOSE

;------------------------
; KEYWORD PARAMETER CHECK - NOTE, ASSUMES ALL PRODUCT ARE RELATED TO THE SAME REGION/PROCESSING

  IF STRCMP(STRING(IFILES[0]),'') THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  
  IF N_ELEMENTS(INPUT_FOLDER) EQ 0 THEN INPUT_FOLDER = GET_DIMITRI_LOCATION('INPUT')

  DELIM = GET_DIMITRI_LOCATION('DL')
  TEMP = STRSPLIT(IFILES[0],DELIM,/EXTRACT)
  
  TEMP_INF  = WHERE(STRCMP(TEMP,'Input') EQ 1)
  TEMP_INF  = TEMP_INF(N_ELEMENTS(TEMP_INF)-1)
  IREGION   = TEMP[TEMP_INF+1]
  IREGION   = STRMID(IREGION,5,STRLEN(IREGION)) 
  SENSOR    = TEMP[TEMP_INF+2]
  IPROC     = TEMP[TEMP_INF+3]
  IPROC     = STRMID(IPROC,5,STRLEN(IPROC)) 
  CFIG_DATA = GET_DIMITRI_CONFIGURATION()
  VGT_SITE_TYPE = GET_SITE_TYPE(IREGION,VERBOSE=VERBOSE) 

  IF N_ELEMENTS(ICOORDS) EQ 0 THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: NO ROI COORDINATES PROVIDED, USING DEFAULT OF [90.,-90,180.0,-180.0]'
    ICOORDS = [90.,-90.,180.0,-180.0]
  ENDIF
  IF N_ELEMENTS(COLOUR_TABLE) EQ 0 THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: NO COLOR_TABLE SET, USING DEFAULT OF 39'
    COLOUR_TABLE = CFIG_DATA.(1)[2]
  ENDIF
  IF N_ELEMENTS(PLOT_XSIZE) EQ 0 THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: PLOT_XSIZE NOT SET, USING DEFAULT OF 700'
    PLOT_XSIZE = CFIG_DATA.(1)[0]
  ENDIF
  IF N_ELEMENTS(PLOT_YSIZE) EQ 0 THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: PLOT_YSIZE NOT SET, USING DEFAULT OF 400'
    PLOT_YSIZE = CFIG_DATA.(1)[1]
  ENDIF  

;------------------------
; DEFINE OUTPUT

  OUTPUT_SAV = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+SENSOR+'_TOA_REF.dat')
  NCDF_FILENAME = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+IREGION+'_'+SENSOR+'_Proc_'+IPROC+'.nc')

;------------------------
; GET NUMBER OF IFILES 

  NB_FILES = N_ELEMENTS(IFILES)

;-----------------------------------------------
; GET THE DATABASE STRUCTURE

  DB_DATA = GET_DIMITRI_TEMPLATE(NB_FILES,/DB)
  
;-----------------------------------------------  
; ADD DATA OF INGESTION TO DB_DATA

  TEMP = SYSTIME()
  TEMP = STRMATCH(STRMID(TEMP,8,1),' ') ? '0'+STRUPCASE(STRING(STRMID(TEMP,9,1)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4))) : STRUPCASE(STRING( STRMID(TEMP,8,2)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4)))
  DB_DATA.DIMITRI_DATE = TEMP 

;-----------------------------------------------
; ADD REGION, SENSOR AND PROC VERSION TO DB_DATA

  DB_DATA.REGION = IREGION
  DB_DATA.SENSOR = SENSOR
  DB_DATA.PROCESSING_VERSION = IPROC
 
;----------------------------------
; DEFINE VEGETATION SPECIFIC PARAMETERS 

  NB_BANDS = 4
  NB_DIRS = SENSOR_DIRECTION_INFO(SENSOR)
  
;----------------------------------
; DEFINE THE STATISTICAL ARRAYS

  BADVAL = -999.0
	ROI_AVG_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	ROI_STD_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	NB_ROI_PX        = FLTARR(NB_FILES)
	GOOD_RECORD      = MAKE_ARRAY(NB_FILES,/INTEGER,VALUE=0)
	IFILE_DATE 	     = DBLARR(5,NB_FILES);CONTAINS YEAR,MONTH,DAY,DOY,DECIMEL_YEAR
	IFILE_VIEW 	     = DBLARR(4,NB_FILES);CONTAINS SENSOR ZENITH,SENSOR AZIMUTH,SOLAR ZENITH,SOLAR AZIMUTH
  IFILE_AUX        = FLTARR(12,NB_FILES);CONTAINS OZONE,PRESSURE,RELHUMIDITY,WIND_ZONAL,WIND_MERID, AND WVAP (MU AND SIGMA)

;---------------------------------
; IF ONLY 1 PRODUCT FOR INGESTION THEN REFORM ARRAYS
  
  IF NB_FILES EQ 1 THEN BEGIN
    ROI_AVG_TOA_REF  = REFORM(ROI_AVG_TOA_REF,NB_BANDS,NB_FILES)
    ROI_STD_TOA_REF  = REFORM(ROI_STD_TOA_REF,NB_BANDS,NB_FILES)
    IFILE_DATE       = REFORM(IFILE_DATE,5,NB_FILES)
    IFILE_VIEW       = REFORM(IFILE_VIEW,4,NB_FILES)
    IFILE_AUX        = REFORM(IFILE_AUX,12,NB_FILES)
  ENDIF

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'VEGETATION L1B INGEST: DEFINITION OF OUTPUT ARRAYS:'
    HELP, ROI_AVG_TOA_REF,ROI_STD_TOA_REF,NB_ROI_PX,GOOD_RECORD,IFILE_DATE,IFILE_VIEW
  ENDIF

;---------------------------------
; ADD DATA TO NETCDF OUTPUT STRUCTURE

  NCDF_OUT = GET_DIMITRI_EXTRACT_NCDF_DATA_STRUCTURE(NB_FILES,NB_BANDS,NB_DIRS)
  NCDF_OUT.ATT_FNAME  = 'Site_'+IREGION+'_'+SENSOR+'_'+'Proc_'+IPROC+'.nc'
  NCDF_OUT.ATT_TOOL   = GET_DIMITRI_LOCATION('TOOL')
  NCDF_OUT.ATT_SENSOR = SENSOR
  NCDF_OUT.ATT_PROCV  = IPROC
  NCDF_OUT.ATT_PRES   = STRTRIM(STRING(SENSOR_PIXEL_SIZE(SENSOR)),2)+' KM'
  NCDF_OUT.ATT_NBANDS = STRTRIM(STRING(NB_BANDS),2)
  NCDF_OUT.ATT_NDIRS  = STRTRIM(STRING(NB_DIRS[0]),2)
  NCDF_OUT.ATT_SITEN  = IREGION
  NCDF_OUT.ATT_SITEC  = STRJOIN(STRTRIM(STRING(ICOORDS),2),' ')
  NCDF_OUT.ATT_SITET  = VGT_SITE_TYPE
 
;----------------------------------
; START MAIN LOOP OVER EACH IFILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: STARTING INGESTION LOOP ON MERIS PRODUCTS'
	FOR IN_FNAME=0,NB_FILES-1 DO BEGIN; IN_FNAME IS RESERVED FOR LOOPS WITHIN THE INGESTION ROUTINES

    TEMP = STRSPLIT(IFILES[IN_FNAME],DELIM,/EXTRACT)
    TEMP1 = N_ELEMENTS(TEMP)
    DB_DATA.FILENAME[IN_FNAME] = STRJOIN(TEMP[TEMP1-3:TEMP1-1],'_') ;MOVED TO WITHIN FILE LOOP

;------------------------------------------
; RETRIEVE AUX DATA FILENAMES FOR DB_DATA

    IF KEYWORD_SET(VERBOSE) THEN PRINT,'VEGETATION L1B INGEST: RETRIEVING HEADER INFORMATION'
    L1B_HEADER = GET_VEGETATION_HEADER_INFO(IFILES[IN_FNAME],VERBOSE=VERBOSE)
       
    TEMP = 'NONE'
    DB_DATA.AUX_DATA_1[IN_FNAME] = L1B_HEADER.PRD_ID
    DB_DATA.AUX_DATA_2[IN_FNAME] = L1B_HEADER.AUX_DEM 
    DB_DATA.AUX_DATA_3[IN_FNAME] = L1B_HEADER.AUX_RAD_EQL 
    DB_DATA.AUX_DATA_4[IN_FNAME] = L1B_HEADER.AUX_RAD_ABS 
    DB_DATA.AUX_DATA_5[IN_FNAME] = L1B_HEADER.AUX_GEO
    DB_DATA.AUX_DATA_6[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_7[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_8[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_9[IN_FNAME] = TEMP 
    DB_DATA.AUX_DATA_10[IN_FNAME] = TEMP 
        
;----------------------------------
; RETRIEVE DATE INFORMATION

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: RETRIEVING DATE INFORMATION'
    IFILE_DATE[0,IN_FNAME]	= STRMID(L1B_HEADER.ACQ_DATE,0,4)
    IFILE_DATE[1,IN_FNAME]	= STRMID(L1B_HEADER.ACQ_DATE,4,2)
    IFILE_DATE[2,IN_FNAME]	= STRMID(L1B_HEADER.ACQ_DATE,6,2)
    IF FLOAT(IFILE_DATE[0,IN_FNAME]) MOD 4 EQ 0 THEN DIY = 366.0 ELSE DIY = 365.0    
    IFILE_DATE[3,IN_FNAME]	= JULDAY(IFILE_DATE[1,IN_FNAME],IFILE_DATE[2,IN_FNAME],$
                                                            IFILE_DATE[0,IN_FNAME])-$
                                                            JULDAY(1,0,IFILE_DATE[0,IN_FNAME])

    THR = FLOAT(STRMID(L1B_HEADER.ACQ_TIME,0,2))
    TMM = FLOAT(STRMID(L1B_HEADER.ACQ_TIME,2,2))
    TSS = FLOAT(STRMID(L1B_HEADER.ACQ_TIME,4,2))
    TTIME = DOUBLE((THR/(DIY*24.))+(TMM/(DIY*60.*24.))+TSS/(DIY*60.*60.*24.))

    IFILE_DATE[4,IN_FNAME] =  FLOAT(IFILE_DATE[0,IN_FNAME])+ DOUBLE(IFILE_DATE[3,IN_FNAME]/DIY)+TTIME

;----------------------------------
; ADD DATE INFORMATION TO DB_DATA

    DB_DATA.YEAR[IN_FNAME]   = IFILE_DATE[0,IN_FNAME]
    DB_DATA.MONTH[IN_FNAME]  = IFILE_DATE[1,IN_FNAME]
    DB_DATA.DAY[IN_FNAME]    = IFILE_DATE[2,IN_FNAME]
    DB_DATA.DOY[IN_FNAME]    = IFILE_DATE[3,IN_FNAME]
    DB_DATA.DECIMAL_YEAR[IN_FNAME] = IFILE_DATE[4,IN_FNAME]

;-----------------------------------------
; SET INITIAL VALUES OF CLOUD SCREENING

    DB_DATA.AUTO_CS[IN_FNAME] = -1
    DB_DATA.MANUAL_CS = -1
    
;-----------------------------------------
; STORE DATE IN NETCDF STRUCTURE

    NCDF_OUT.VAR_PNAME[IN_FNAME]  = DB_DATA.FILENAME[IN_FNAME] 
    NCDF_OUT.VAR_PTIME[IN_FNAME]  = STRMID(L1B_HEADER.ACQ_DATE,0,8)+' '+STRMID(L1B_HEADER.ACQ_TIME,0,2)+':'+STRMID(L1B_HEADER.ACQ_TIME,2,2)+':'+STRMID(L1B_HEADER.ACQ_TIME,4,2)
    NCDF_OUT.VAR_DTIME[IN_FNAME]  = DB_DATA.DECIMAL_YEAR[IN_FNAME]

;------------------------------------------
; CHECK THAT THE REFLECTANCE DATA IS PRESENT

    TMP_FILE1 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'B0.HDF')
    TMP_FILE2 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'MIR.HDF')
    TMP_FILE3 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'B2.HDF')
    TMP_FILE4 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'B3.HDF')
    TMP_FILE5 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'VZA.HDF')
    TMP_FILE6 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'VAA.HDF')
    TMP_FILE7 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'SZA.HDF')
    TMP_FILE8 = STRING(STRMID(IFILES[IN_FNAME],0,STRLEN(IFILES[IN_FNAME])-7)+'SAA.HDF')
    

    IF FILE_TEST(TMP_FILE1) EQ 0 or $
    FILE_TEST(TMP_FILE2) EQ 0 or $
    FILE_TEST(TMP_FILE3) EQ 0 or $
    FILE_TEST(TMP_FILE4) EQ 0 or $
    FILE_TEST(TMP_FILE5) EQ 0 or $
    FILE_TEST(TMP_FILE6) EQ 0 or $
    FILE_TEST(TMP_FILE7) EQ 0 or $
    FILE_TEST(TMP_FILE8) EQ 0 THEN GOTO, NO_BAND_DATA

;------------------------------------------
; GENERATE A QUICKLOOK WITH THE ROI OVERLAID
  
    IF N_ELEMENTS(NO_QUICKLOOK) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: GENERATE QUICKLOOK OF PRODUCT'
      IF FIX(CFIG_DATA.(1)[3]) EQ 1 THEN QL_STATUS =  GET_VEGETATION_QUICKLOOK(IFILES[IN_FNAME],/ROI,/RGB,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,VERBOSE=VERBOSE) $
         ELSE QL_STATUS =  GET_VEGETATION_QUICKLOOK(IFILES[IN_FNAME],/ROI,ICOORDS=ICOORDS,QL_QUALITY=QL_QUALITY,VERBOSE=VERBOSE)

      IF KEYWORD_SET(VERBOSE) THEN IF QL_STATUS EQ -1 THEN PRINT, 'VEGETATION L1B INGEST: QUICKLOOK GENERATION FAILED - ',IFILES[IN_FNAME] $
        ELSE PRINT, 'VEGETATION L1B INGEST: QUICKLOOK GENERATION SUCCESS' 
    ENDIF  

;-----------------------------------------
; RETRIEVE PRODUCT DATA
  
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: RETRIEVING GEOLOCATION, REFLECTANCE AND VIEWING GEOMETRIES'
    L1B_GEO = GET_VEGETATION_LAT_LON(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    L1B_REF = GET_VEGETATION_L1B_REFLECTANCE(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    IF MAX(L1B_REF[*,*,0] LT 0.00001) THEN GOTO, NO_BAND_DATA
    L1B_VGEO= GET_VEGETATION_VIEWING_GEOMETRIES(IFILES[IN_FNAME],VERBOSE=VERBOSE)

;------------------------------------------
; RETRIEVE INDEX OF NOMINAL DATA WITHIN ROI
 
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: RETRIEVING INDEX OF PIXELS WITHIN ROI'
    ROI_INDEX = WHERE($
            L1B_GEO.LAT LT ICOORDS[0] AND $
            L1B_GEO.LAT GT ICOORDS[1] AND $
            L1B_GEO.LON LT ICOORDS[2] AND $
            L1B_GEO.LON GT ICOORDS[3] AND $
            L1B_REF[*,*,0] GT 0.0    , $
            NB_PIX $
            )
 
    DB_DATA.NUM_ROI_PX[IN_FNAME] = NB_PIX 
       
;-----------------------------------------
; IF NO PIXELS IN ROI THEN DO NOT RETRIEVE 
; TOA REFLECTANCE

       IF ROI_INDEX[0] EQ -1 THEN BEGIN
        NO_BAND_DATA:
        DB_DATA.NUM_ROI_PX[IN_FNAME] = -1
        IFILE_VIEW[*,IN_FNAME]= BADVAL
        IFILE_AUX[*,IN_FNAME] = BADVAL
        ROI_AVG_TOA_REF(*,IN_FNAME) = BADVAL
        ROI_STD_TOA_REF(*,IN_FNAME) = BADVAL
        GOTO, NO_ROI
      ENDIF

;------------------------------------------
; RETRIEVE VIEWING/ILLUMINATION GEOMETRIES

      IF KEYWORD_SET(VERBOSE) THEN PRINT,'VEGETATION L1B INGEST: AVERAGING VIEWING AND ILLUMINATION ANGLES'
      
      TEMP_ANGLES = DIMITRI_ANGLE_CORRECTOR(L1B_VGEO[*,*,2],L1B_VGEO[*,*,3],L1B_VGEO[*,*,0],L1B_VGEO[*,*,1])

      TEMP = TEMP_ANGLES.VZA
        IFILE_VIEW[0,IN_FNAME]=MEAN(TEMP(ROI_INDEX))
      TEMP = TEMP_ANGLES.VAA
        IFILE_VIEW[1,IN_FNAME]=MEAN(TEMP(ROI_INDEX))
      TEMP_SZA = TEMP_ANGLES.SZA
        IFILE_VIEW[2,IN_FNAME]=MEAN(TEMP_SZA(ROI_INDEX))
      TEMP = TEMP_ANGLES.SAA
        IFILE_VIEW[3,IN_FNAME]=MEAN(TEMP(ROI_INDEX))
      TEMP=0    

;----------------------------------------
; GET OZONE AND WVAP CONCENTRATIONS

      IFILE_AUX[*,IN_FNAME] = BADVAL

      TEMP = GET_VEGETATION_OZONE(IFILES[IN_FNAME],VERBOSE=VERBOSE)
      IFILE_AUX[0,IN_FNAME] = 1000.*MEAN(TEMP(ROI_INDEX))
      IFILE_AUX[1,IN_FNAME] = 1000.*STDEV(TEMP(ROI_INDEX)) 

      TEMP = GET_VEGETATION_WVAP(IFILES[IN_FNAME],VERBOSE=VERBOSE)  
      IFILE_AUX[10,IN_FNAME] = MEAN(TEMP(ROI_INDEX))
      IFILE_AUX[11,IN_FNAME] = STDEV(TEMP(ROI_INDEX))     
      
;------------------------------------------
; CREATE ARRAY FOR CLOUD SCREENING RHO 

      CS_REF = MAKE_ARRAY(NB_PIX,NB_BANDS,/FLOAT)

;-----------------------------------------
; STORE DATA IN NETCDF STRUCTURE

      NCDF_OUT.VAR_VZA[0,IN_FNAME]      = IFILE_VIEW[0,IN_FNAME]
      NCDF_OUT.VAR_VAA[0,IN_FNAME]      = IFILE_VIEW[1,IN_FNAME]
      NCDF_OUT.VAR_SZA[0,IN_FNAME]      = IFILE_VIEW[2,IN_FNAME]
      NCDF_OUT.VAR_SAA[0,IN_FNAME]      = IFILE_VIEW[3,IN_FNAME]

      NCDF_OUT.VAR_OZONEMU[IN_FNAME]  = IFILE_AUX[0,IN_FNAME]
      NCDF_OUT.VAR_OZONESD[IN_FNAME]  = IFILE_AUX[1,IN_FNAME]
      NCDF_OUT.VAR_PRESSMU[IN_FNAME]  = IFILE_AUX[2,IN_FNAME]
      NCDF_OUT.VAR_PRESSSD[IN_FNAME]  = IFILE_AUX[3,IN_FNAME]
      NCDF_OUT.VAR_RHUMMU[IN_FNAME]   = IFILE_AUX[4,IN_FNAME]
      NCDF_OUT.VAR_RHUMSD[IN_FNAME]   = IFILE_AUX[5,IN_FNAME]
      NCDF_OUT.VAR_ZONALMU[IN_FNAME]  = IFILE_AUX[6,IN_FNAME]
      NCDF_OUT.VAR_ZONALSD[IN_FNAME]  = IFILE_AUX[7,IN_FNAME]
      NCDF_OUT.VAR_MERIDMU[IN_FNAME]  = IFILE_AUX[8,IN_FNAME]
      NCDF_OUT.VAR_MERIDSD[IN_FNAME]  = IFILE_AUX[9,IN_FNAME]
      NCDF_OUT.VAR_WVAPMU[IN_FNAME]   = IFILE_AUX[10,IN_FNAME]
      NCDF_OUT.VAR_WVAPSD[IN_FNAME]   = IFILE_AUX[11,IN_FNAME]

;------------------------------------------
; LOOP OVER EACH BAND

      IF KEYWORD_SET(VERBOSE) THEN PRINT,'VEGETATION L1B INGEST: STARTING LOOP OVER EACH BAND'
      FOR IN_BAND=0,NB_BANDS-1 DO BEGIN
      
      TEMP_REF = L1B_REF[*,*,IN_BAND]
      VALID = WHERE(TEMP_REF(ROI_INDEX) GT 0.0 AND TEMP_REF(ROI_INDEX) LT 5.0,count)
      
      IF VALID[0] GT -1 THEN BEGIN
        ROI_AVG_TOA_REF(IN_BAND,IN_FNAME) = MEAN(TEMP_REF(ROI_INDEX[VALID]))
        ROI_STD_TOA_REF(IN_BAND,IN_FNAME) = STDDEV(TEMP_REF(ROI_INDEX[VALID]))
        NCDF_OUT.VAR_PIX[IN_BAND,IN_FNAME,0]      = COUNT
        NCDF_OUT.VAR_RHOMU[IN_BAND,IN_FNAME,0]    = MEAN(TEMP_REF(ROI_INDEX[VALID]))
        NCDF_OUT.VAR_RHOSD[IN_BAND,IN_FNAME,0]    = STDDEV(TEMP_REF(ROI_INDEX[VALID]))
      ENDIF
      
      CS_REF[*,IN_BAND] = TEMP_REF(ROI_INDEX)
      
      ENDFOR;END OF LOOP ON BANDS
 
 ;----------------------------------
 ; APPLY CLOUD SCREENING
 
      CS_VGT = DIMITRI_CLOUD_SCREENING(SENSOR,VGT_SITE_TYPE,CS_REF,0,'VGT')
      DB_DATA.AUTO_CS[IN_FNAME] = CS_VGT
      NCDF_OUT.VAR_CLOUD_AUT[IN_FNAME]  = CS_VGT
      NCDF_OUT.VAR_CLOUD_MAN[IN_FNAME]  = -1
  NO_ROI:

	IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: END OF LOOP ON PRODUCT'
	ENDFOR; END OF FILE ANALYSIS

;------------------------------------
; AMEND/SAVE DATA TO SAV FILE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: DEFINING OUTPUT ARRAY'
  NUM_NON_REF = 5+12
  NB_COLS = NUM_NON_REF+2*(NB_BANDS)

  SENSOR_L1B_REF          = DBLARR(NB_COLS,NB_FILES)
  IF NB_FILES EQ 1 THEN SENSOR_L1B_REF = REFORM(SENSOR_L1B_REF,NB_COLS,NB_FILES)
  SENSOR_L1B_REF[0,*]     = IFILE_DATE[4,*] ;UPDATED FROM DAY OF YEAR TO DECIMEL YEAR
  SENSOR_L1B_REF[1:4,*]   = IFILE_VIEW[*,*]
  SENSOR_L1B_REF[5:16,*]  = IFILE_AUX[*,*]
  SENSOR_L1B_REF[NUM_NON_REF:NUM_NON_REF+NB_BANDS-1,*]  = ROI_AVG_TOA_REF[*,*] 
  SENSOR_L1B_REF[NUM_NON_REF+NB_BANDS:NUM_NON_REF-1+2*NB_BANDS,*] = ROI_STD_TOA_REF[*,*] 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: AMMENDING DATA TO OUTPUT SAV FILE'
	TEMP = FILE_INFO(OUTPUT_SAV)
	IF TEMP.EXISTS EQ 1 THEN BEGIN
	 TEMP_NEW = SENSOR_L1B_REF
   IF N_ELEMENTS(TEMP_NEW) EQ NB_COLS THEN TEMP_NEW = REFORM(TEMP_NEW,NB_COLS,NB_FILES)  
   RESTORE,OUTPUT_SAV
   TEMP_OLD = SENSOR_L1B_REF
   IF N_ELEMENTS(TEMP_OLD) EQ NB_COLS THEN TEMP_OLD = REFORM(TEMP_OLD,NB_COLS,NB_FILES)
   RES_DIMS = SIZE(TEMP_OLD)
     
   SENSOR_L1B_REF = MAKE_ARRAY(NB_COLS,RES_DIMS[2]+NB_FILES,/DOUBLE)
   SENSOR_L1B_REF[*,0:RES_DIMS[2]-1] = TEMP_OLD
   SENSOR_L1B_REF[*,RES_DIMS[2]:RES_DIMS[2]+NB_FILES-1] = TEMP_NEW
 
	ENDIF
	
	RES = SORT(SENSOR_L1B_REF[0,*])
  SENSOR_L1B_REF = SENSOR_L1B_REF[*,RES]
	SAVE,SENSOR_L1B_REF,FILENAME=OUTPUT_SAV

;------------------------------------
; GENERATE PLOTS WITH NEW TIME SERIES DATA

  RES = GET_VEGETATION_TIMESERIES_PLOTS(OUTPUT_SAV,COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,VERBOSE=VERBOSE) 

;------------------------------------
; SAVE DATA TO NETCDF FILE

  RES = DIMITRI_INTERFACE_EXTRACT_TOA_NCDF(NCDF_OUT,NCDF_FILENAME)  

;------------------------------------
; AMEND DATA TO DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'VEGETATION L1B INGEST: SENDING DATA TO UPDATE DATABASE'
  RES = UPDATE_DIMITRI_DATABASE(DB_DATA,/SORT_DB,VERBOSE=VERBOSE) 
 
	RETURN,1 
END
