;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      GET_MODISA_VIEWING_GEOMETRIES       
;* 
;* PURPOSE:
;*      RETURNS THE INTERPOLATED VIEWING_GEOMETRIES OF A MODISA IMAGE
;* 
;* CALLING SEQUENCE:
;*      RES = GET_MODISA_VIEWING_GEOMETRIES(FILENAME)      
;* 
;* INPUTS:
;*      FILENAME - A SCALAR CONTAINING THE FILENAME OF THE PRODUCT FOR GEOLOCAITON EXTRACTION      
;*
;* KEYWORDS:
;*      VERBOSE     - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STRUCT.SZA   - SOLAR ZENITH ANGLE IN DEGREES
;*      STRUCT.SAA   - SOLAR AZIMUTH ANGLE IN DEGREES
;*      STRUCT.VZA   - SENSOR ZENITH ANGLE IN DEGREES
;*      STRUCT.VAA   - SENSOR AZIMUTH ANGLE IN DEGREES	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*                  - M BOUVET - PROTOTYPE DIMITRI VERSION
;*      02 DEC 2010 - C KENT   - DIMITRI-2 V1.0
;*      27 APR 2011 - C KENT   - ADDED FULL SWATH EXCEPTION PROCESSING
;*
;* VALIDATION HISTORY:
;*      01 DEC 2010 - C KENT    - WINDOWS 32-BIT MACHINE IDL 7.1: COMPILATION SUCCESSFUL, 
;*                                PIXEL DATA WITHIN APPROXIMATELY 0.004 DEGREES OF BEAM VISAT
;*      05 JAN 2011 - C KENT    - LINUX 64-BIT MACHINE IDL 8.0: COMPILATION SUCCESSFUL, 
;*                                NO APPARENT DIFFERENCES WHEN COMPARED TO WINDOWS MACHINE
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION GET_MODISA_VIEWING_GEOMETRIES,FILENAME,VERBOSE=VERBOSE

;------------------------------------------------
; CHECK FILENAME AND IN_BAND ARE NOMINAL

  IF FILENAME EQ '' THEN BEGIN
    PRINT, 'MODISA L1B VIEWING_GEOMETRIES: ERROR, INPUT FILENAME INCORRECT'
    RETURN,-1
  ENDIF

;------------------------------------------------
;OPEN THE L1B FILE AND RETRIEVE THE GEOMETRIES

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: RETRIEVING SOLAR ZENITH VALUES'
  HDF_ID = HDF_SD_START(FILENAME,/READ)
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SolarZenith')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,L1B_SZA
  ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
  IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
  HDF_SD_ENDACCESS, SDS_ID

  GEO_DIMS  = SIZE(L1B_SZA)
  L1B_SZA=FLOAT(L1B_SZA)
  SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF) 
  L1B_SZA=L1B_SZA*SCF

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: RETRIEVING SOLAR AZIMUTH VALUES'
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SolarAzimuth')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,L1B_SAA
  ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
  IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
  HDF_SD_ENDACCESS, SDS_ID
  L1B_SAA=FLOAT(L1B_SAA)
  SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF) 
  L1B_SAA=L1B_SAA*SCF

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: RETRIEVING SENSOR ZENITH VALUES'  
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SensorZenith')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,L1B_VZA
  ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
  IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
  HDF_SD_ENDACCESS, SDS_ID
  L1B_VZA=FLOAT(L1B_VZA)
  SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF) 
  L1B_VZA=L1B_VZA*SCF

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: RETRIEVING SENSOR AZIMUTH VALUES'   
  SDS_NAME = HDF_SD_NAMETOINDEX(HDF_ID, 'SensorAzimuth')
  SDS_ID=HDF_SD_SELECT(HDF_ID,SDS_NAME)
  HDF_SD_GETDATA,SDS_ID,L1B_VAA
  ATTR_INDX = HDF_SD_ATTRFIND(SDS_ID, 'scale_factor')
  IF ATTR_INDX GE 0 THEN HDF_SD_ATTRINFO, SDS_ID, ATTR_INDX, DATA=SCF
  HDF_SD_ENDACCESS, SDS_ID
  L1B_VAA=FLOAT(L1B_VAA)
  SCF = MAKE_ARRAY(GEO_DIMS[1],GEO_DIMS[2],/FLOAT,VALUE=SCF) 
  L1B_VAA=L1B_VAA*SCF
    
;-------------------------------------------------
; CLOSE THE HDF FILE 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: CLOSING HDF FILE' 
  HDF_SD_END,HDF_ID
  
;-------------------------------------------------
; INTERPOLATE VIEWING GEOMETRIES TO RADIANCE GRID 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: REGRID DATA INTO RADIANCE PRODUCT DIMENSIONS'
  IF GEO_DIMS[1] EQ 271. THEN OFFSET = 1 ELSE OFFSET = 0

  L1B_SZA = CONGRID(L1B_SZA,(GEO_DIMS[1])*5-OFFSET-4,(GEO_DIMS[2])*5-4,/INTERP)
  L1B_SAA = CONGRID(L1B_SAA,(GEO_DIMS[1])*5-OFFSET-4,(GEO_DIMS[2])*5-4,/INTERP)
  L1B_VZA = CONGRID(L1B_VZA,(GEO_DIMS[1])*5-OFFSET-4,(GEO_DIMS[2])*5-4,/INTERP)
  L1B_VAA = CONGRID(L1B_VAA,(GEO_DIMS[1])*5-OFFSET-4,(GEO_DIMS[2])*5-4,/INTERP)

  INT_SZA = MAKE_ARRAY((GEO_DIMS[1])*5-OFFSET,(GEO_DIMS[2])*5,/FLOAT)
  INT_SAA = MAKE_ARRAY((GEO_DIMS[1])*5-OFFSET,(GEO_DIMS[2])*5,/FLOAT)
  INT_VZA = MAKE_ARRAY((GEO_DIMS[1])*5-OFFSET,(GEO_DIMS[2])*5,/FLOAT)
  INT_VAA = MAKE_ARRAY((GEO_DIMS[1])*5-OFFSET,(GEO_DIMS[2])*5,/FLOAT)
    
  TEMP_DIMS = SIZE(INT_SZA)
  INT_SZA[2:TEMP_DIMS[1]-3,2:TEMP_DIMS[2]-3] = L1B_SZA
  INT_SAA[2:TEMP_DIMS[1]-3,2:TEMP_DIMS[2]-3] = L1B_SAA
  INT_VZA[2:TEMP_DIMS[1]-3,2:TEMP_DIMS[2]-3] = L1B_VZA
  INT_VAA[2:TEMP_DIMS[1]-3,2:TEMP_DIMS[2]-3] = L1B_VAA
  
  L1B_SZA = 0 & L1B_SAA = 0 & L1B_VZA = 0 & L1B_VAA = 0
 
;-------------------------------------------------
; LINEAR EXTRAPOLATION FOR THE 2 EDGE PIXELS

  TEMP = [1,0,TEMP_DIMS[2]-2,TEMP_DIMS[2]-1]
  F1 = [1,1,-1,-1]
  F2 = [2,2,-2,-2]
  
  FOR MODJ = 0,N_ELEMENTS(TEMP)-1 DO BEGIN
    MODK=TEMP[MODJ]
    FOR MODI=2,TEMP_DIMS[1]-3 DO BEGIN
      INT_SZA[MODI,MODK] = INT_SZA[MODI,MODK+F1[MODJ]]+(INT_SZA[MODI,MODK+F1[MODJ]]-INT_SZA[MODI,MODK+F2[MODJ]])
      INT_SAA[MODI,MODK] = INT_SAA[MODI,MODK+F1[MODJ]]+(INT_SAA[MODI,MODK+F1[MODJ]]-INT_SAA[MODI,MODK+F2[MODJ]])
      INT_VZA[MODI,MODK] = INT_VZA[MODI,MODK+F1[MODJ]]+(INT_VZA[MODI,MODK+F1[MODJ]]-INT_VZA[MODI,MODK+F2[MODJ]])
      INT_VAA[MODI,MODK] = INT_VAA[MODI,MODK+F1[MODJ]]+(INT_VAA[MODI,MODK+F1[MODJ]]-INT_VAA[MODI,MODK+F2[MODJ]])
    ENDFOR
  ENDFOR
    
  TEMP = [1,0,TEMP_DIMS[1]-2,TEMP_DIMS[1]-1]
  FOR MODI = 0,N_ELEMENTS(TEMP)-1 DO BEGIN
    MODK=TEMP[MODI]
    FOR MODJ=0,TEMP_DIMS[2]-3 DO BEGIN
      INT_SZA[MODK,MODJ] = INT_SZA[MODK+F1[MODI],MODJ]+(INT_SZA[MODK+F1[MODI],MODJ]-INT_SZA[MODK+F2[MODI],MODJ])
      INT_SAA[MODK,MODJ] = INT_SAA[MODK+F1[MODI],MODJ]+(INT_SAA[MODK+F1[MODI],MODJ]-INT_SAA[MODK+F2[MODI],MODJ])
      INT_VZA[MODK,MODJ] = INT_VZA[MODK+F1[MODI],MODJ]+(INT_VZA[MODK+F1[MODI],MODJ]-INT_VZA[MODK+F2[MODI],MODJ])
      INT_VAA[MODK,MODJ] = INT_VAA[MODK+F1[MODI],MODJ]+(INT_VAA[MODK+F1[MODI],MODJ]-INT_VAA[MODK+F2[MODI],MODJ])

    ENDFOR
  ENDFOR
  
;------------------------------------------------
; RETURN LAT AND LON

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B VIEWING_GEOMETRIES: RETURNING VIEWING GEOMETRIES'
  RETURN,{SZA:INT_SZA,SAA:INT_SAA,VZA:INT_VZA,VAA:INT_VAA}

END