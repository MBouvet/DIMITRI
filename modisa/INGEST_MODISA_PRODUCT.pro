;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      INGEST_MODISA_PRODUCT       
;* 
;* PURPOSE:
;*      INGESTS MODIS-AQUA L1B DATA INTO DIMITRI DATABASE. MULTIPLE PRODUCT 
;*	    EXTRACTION IS AVAILABLE BUT IT EXPECTS ALL FILES TO BE THE SAME REGION/PROCESSING. 
;*      OUTPUTS QUICKLOOK IMAGES, UPDATES DATABASE AND APPENDS DATA TO SAV FILE FOR 
;*      SPECIFIED REGION AND PROCESSING.
;* 
;* CALLING SEQUENCE:
;*      RES = INGEST_MODISA_PRODUCT(IFILES)      
;* 
;* INPUTS:
;*      IFILES -  A STRING OR STRING ARRAY OF THE FULL PATH FILENAMES OF PRODUCTS 
;*                FOR INGESTION.      
;*
;* KEYWORDS:
;*      INPUT_FOLDER      - A STRING CONTAINING THE FULL PATH OF THE 'INPUT' FOLDER, IF 
;*                          NOT PROVIDED THEN IT IS DERIVED FROM THE FILENAME
;*      ICOORDS           - A FOUR ELEMENT FLOATING-POINT ARRAY CONTAINING THE NORTH, SOUTH, 
;*                          EAST AND WEST COORDINATES OF THE ROI, E.G [50.,45.,10.,0.]
;*      NB_PIX_THRESHOLD  - NUMBER OF PIXELS WITHIN ROI TO BE ACCEPTED
;*      ENDIAN_SZE        - MACHINE ENDIAN SIZE (0: LITTLE, 1: BIG), IF NOT PROVIDED 
;*                          THEN COMPUTED.
;*      COLOUR_TABLE      - USER DEFINED IDL COLOUR TABLE INDEX (DEFAULT IS 39)
;*      PLOT_XSIZE        - WIDTH OF GENERATED PLOTS (DEFAULT IS 700PX)
;*      PLOT_YSIZE        - HEIGHT OF GENERATED PLOTS (DEFAULT IS 400PX)
;*      NO_ZBUFF          - IF SET THEN PLOTS ARE GENERATED IN WINDOWS AND NOT 
;*                          WIHTIN THE Z-BUFFER.
;*      NO_QUICKLOOK      - IF SET THEN QUICKLOOKS ARE NOT GENERATED FOR IFILES.
;*      VERBOSE           - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS  - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION	
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        04 JUL 2005 - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*        03 DEC 2010 - C KENT    - DIMITRI-2 V1.0
;*        07 DEC 2010 - C KENT    - UPDATED TOA_REF AVERAGING SECTION
;*        20 DEC 2010 - C KENT    - UPDATED COMMENTS AND HEADER INFORMATION
;*        10 JAN 2011 - C KENT    - CHANGED SAVED OUTPUT VARIABLE TO SENSOR_L1B_REF 
;*        12 JAN 2011 - C KENT    - OUTPUT RGB QUICKLOOKS AS DEFUALT, UPDATED OUTPUT DATA 
;*                                  WITH SAA AND VAA (REMOVED RAA)
;*        21 MAR 2011 - C KENT    - MODIFIED FILE DEFINITION TO USE GET_DIMITRI_LOCATION
;*        22 MAR 2011 - C KENT    - ADDED CONFIGURAITON FILE DEPENDENCE
;*        01 JUL 2011 - C KENT    - ADDED ANGLE CORRECTOR
;*        04 JUL 2011 - C KENT    - ADDED AUX INFO TO OUTPUT SAV AND CLEANED UP SOME CODE
;*        12 JUL 2011 - C KENT    - FIXED AUX INFO BUG
;*        25 AUG 2011 - C KENT    - ADDED CHECK ON VALID ROI PIXEL AVERAGING
;*
;* VALIDATION HISTORY:
;*        12 APR 2010 - C KENT    - WINDOWS 32BIT MACHINE IDL 7.1: COMPILATION AND EXECUTION 
;*                                  SUCCESSFUL. TESTED MULTIPLE OPTIONS ON MULTIPLE 
;*                                  PRODUCTS
;*        12 APR 2011 - C KENT    - LINUX 64BIT MACHINE IDL 8.0: COMPILATION AND OPERATION SUCCESSFUL
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION INGEST_MODISA_PRODUCT,IFILES,INPUT_FOLDER=INPUT_FOLDER,ICOORDS=ICOORDS,$
         COLOUR_TABLE=COLOUR_TABLE,$
         PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,NO_ZBUFF=NO_ZBUFF,NO_QUICKLOOK=NO_QUICKLOOK,$
         VERBOSE=VERBOSE

;------------------------
; KEYWORD PARAMETER CHECK - NOTE, ASSUMES ALL PRODUCT ARE RELATED TO THE SAME REGION/PROCESSING

  IF STRCMP(STRING(IFILES[0]),'') THEN BEGIN
    PRINT, 'MODISA L1B INGEST: ERROR, NO INPUT FILES PROVIDED, RETURNING...'
    RETURN,-1
  ENDIF  
  IF N_ELEMENTS(INPUT_FOLDER) EQ 0 THEN INPUT_FOLDER = GET_DIMITRI_LOCATION('INPUT')

  DELIM = GET_DIMITRI_LOCATION('DL')
  TEMP = STRSPLIT(IFILES[0],DELIM,/EXTRACT)

  TEMP_INF  = WHERE(STRCMP(TEMP,'Input') EQ 1)
  TEMP_INF  = TEMP_INF(N_ELEMENTS(TEMP_INF)-1)
  IREGION   = TEMP[TEMP_INF+1]
  IREGION   = STRMID(IREGION,5,STRLEN(IREGION)) 
  SENSOR    = TEMP[TEMP_INF+2]
  IPROC     = TEMP[TEMP_INF+3]
  IPROC     = STRMID(IPROC,5,STRLEN(IPROC)) 
  CFIG_DATA = GET_DIMITRI_CONFIGURATION() 
  AQA_SITE_TYPE = GET_SITE_TYPE(IREGION,VERBOSE=VERBOSE) 
  
  IF STRUPCASE(AQA_SITE_TYPE) EQ 'OCEAN' THEN AQA_SENSOR = SENSOR+'_O' ELSE AQA_SENSOR = SENSOR+'_L'
  
  IF N_ELEMENTS(ICOORDS) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: NO ROI COORDINATES PROVIDED, USING DEFAULT OF [90.,-90,180.0,-180.0]'
    ICOORDS = [90.,-90.,180.0,-180.0]
  ENDIF
  IF N_ELEMENTS(COLOUR_TABLE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: NO COLOR_TABLE SET, USING DEFAULT OF 39'
    COLOUR_TABLE = CFIG_DATA.(1)[2]
  ENDIF
  IF N_ELEMENTS(PLOT_XSIZE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: PLOT_XSIZE NOT SET, USING DEFAULT OF 700'
    PLOT_XSIZE = CFIG_DATA.(1)[0]
  ENDIF
  IF N_ELEMENTS(PLOT_YSIZE) EQ 0 THEN BEGIN
    PRINT, 'MODISA L1B INGEST: PLOT_YSIZE NOT SET, USING DEFAULT OF 400'
    PLOT_YSIZE = CFIG_DATA.(1)[1]
  ENDIF  

;------------------------
; DEFINE OUTPUT

  OUTPUT_SAV = STRING(INPUT_FOLDER+DELIM+'Site_'+IREGION+DELIM+SENSOR+DELIM+'Proc_'+IPROC+DELIM+SENSOR+'_TOA_REF.dat')

;------------------------
; GET NUMBER OF IFILES 

  NB_FILES = N_ELEMENTS(IFILES)

;-----------------------------------------------
; GET THE DATABASE STRUCTURE

  DB_DATA = GET_DIMITRI_TEMPLATE(NB_FILES,/DB)
  
;-----------------------------------------------  
; ADD DATA OF INGESTION TO DB_DATA

  TEMP = SYSTIME()
  TEMP = STRMATCH(STRMID(TEMP,8,1),' ') ? '0'+STRUPCASE(STRING(STRMID(TEMP,9,1)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4))) : STRUPCASE(STRING( STRMID(TEMP,8,2)+'-'+STRMID(TEMP,4,3)+'-'+STRMID(TEMP,20,4)))
  DB_DATA.DIMITRI_DATE = TEMP 

;-----------------------------------------------
; ADD REGION, SENSOR AND PROC VERSION TO DB_DATA

  DB_DATA.REGION = IREGION
  DB_DATA.SENSOR = SENSOR
  DB_DATA.PROCESSING_VERSION = IPROC
 
;----------------------------------
; DEFINE MODISA SPECIFIC PARAMETERS 

  NB_BANDS_1KM = 15
  NB_BANDS_500 = 5
  NB_BANDS_250 = 2
  NB_BANDS = NB_BANDS_1KM+NB_BANDS_500+NB_BANDS_250

;----------------------------------
; DEFINE THE STATISTICAL ARRAYS

  BADVAL = -999.0
	ROI_AVG_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	ROI_STD_TOA_REF  = FLTARR(NB_BANDS,NB_FILES)
	NB_ROI_PX        = FLTARR(NB_FILES)
	GOOD_RECORD      = MAKE_ARRAY(NB_FILES,/INTEGER,VALUE=0)
	IFILE_DATE 	     = DBLARR(5,NB_FILES);CONTAINS YEAR,MONTH,DAY,DOY,DECIMEL_YEAR
	IFILE_VIEW 	     = DBLARR(4,NB_FILES);CONTAINS SENSOR ZENITH,SENSOR AZIMUTH,SOLAR ZENITH,SOLAR AZIMUTH
  IFILE_AUX        = FLTARR(12,NB_FILES);CONTAINS OZONE,PRESSURE,RELHUMIDITY,WIND_ZONAL,WIND_MERID, AND WVAP (MU AND SIGMA)
  
;---------------------------------
; IF ONLY 1 PRODUCT FOR INGESTION THEN REFORM ARRAYS
  
  IF NB_FILES EQ 1 THEN BEGIN
    ROI_AVG_TOA_REF  = REFORM(ROI_AVG_TOA_REF,NB_BANDS,NB_FILES)
    ROI_STD_TOA_REF  = REFORM(ROI_STD_TOA_REF,NB_BANDS,NB_FILES)
    IFILE_DATE       = REFORM(IFILE_DATE,5,NB_FILES)
    IFILE_VIEW       = REFORM(IFILE_VIEW,4,NB_FILES)
    IFILE_AUX        = REFORM(IFILE_AUX,12,NB_FILES)
  ENDIF

  IF KEYWORD_SET(VERBOSE) THEN BEGIN
    PRINT, 'MODISA L1B INGEST: DEFINITION OF OUTPUT ARRAYS:'
    HELP, ROI_AVG_TOA_REF,ROI_STD_TOA_REF,NB_ROI_PX,GOOD_RECORD,IFILE_DATE,IFILE_VIEW
  ENDIF

;----------------------------------
; START MAIN LOOP OVER EACH IFILE
 
  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: STARTING INGESTION LOOP ON MERIS PRODUCTS'
	FOR IN_FNAME=0,NB_FILES-1 DO BEGIN; IN_FNAME IS RESERVED FOR LOOPS WITHIN THE INGESTION ROUTINES

    TEMP = STRSPLIT(IFILES[IN_FNAME],DELIM,/EXTRACT)
    DB_DATA.FILENAME[IN_FNAME] = TEMP[N_ELEMENTS(TEMP)-1]

;------------------------------------------
; GENERATE A QUICKLOOK WITH THE ROI OVERLAID
  
    IF N_ELEMENTS(NO_QUICKLOOK) EQ 0 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: GENERATE QUICKLOOK OF PRODUCT'
      IF FIX(CFIG_DATA.(1)[3]) EQ 1 THEN QL_STATUS =  GET_MODISA_QUICKLOOK(IFILES[IN_FNAME],/ROI,/RGB,ICOORDS=ICOORDS,VERBOSE=VERBOSE) $
        ELSE QL_STATUS =  GET_MODISA_QUICKLOOK(IFILES[IN_FNAME],/ROI,ICOORDS=ICOORDS,VERBOSE=VERBOSE)
      
      IF KEYWORD_SET(VERBOSE) THEN IF QL_STATUS EQ -1 THEN PRINT, 'MODISA L1B INGEST: QUICKLOOK GENERATION FAILED - ',IFILES[IN_FNAME] $
        ELSE PRINT, 'MODISA L1B INGEST: QUICKLOOK GENERATION SUCCESS' 
    ENDIF    

;------------------------------------------
; RETRIEVE AUX DATA FILENAMES FOR DB_DATA

    TEMP = GET_MODISA_AUX_FILES(IFILES[IN_FNAME],VERBOSE=VERBOSE)	

    DB_DATA.AUX_DATA_1[IN_FNAME] = TEMP[0]
    DB_DATA.AUX_DATA_2[IN_FNAME] = TEMP[1] 
    DB_DATA.AUX_DATA_3[IN_FNAME] = TEMP[2] 
    DB_DATA.AUX_DATA_4[IN_FNAME] = TEMP[3] 
    DB_DATA.AUX_DATA_5[IN_FNAME] = TEMP[4] 
    DB_DATA.AUX_DATA_6[IN_FNAME] = TEMP[5] 
    DB_DATA.AUX_DATA_7[IN_FNAME] = TEMP[6] 
    DB_DATA.AUX_DATA_8[IN_FNAME] = TEMP[7] 
    DB_DATA.AUX_DATA_9[IN_FNAME] = TEMP[8] 
    DB_DATA.AUX_DATA_10[IN_FNAME] = TEMP[9] 
       
;----------------------------------
; RETRIEVE DATE INFORMATION 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING DATE INFORMATION'
    TEMP = GET_MODISA_DATE_INFO(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    
    IFILE_DATE[0,IN_FNAME]  = TEMP.YEAR
    IFILE_DATE[1,IN_FNAME]  = TEMP.MONTH
    IFILE_DATE[2,IN_FNAME]  = TEMP.DAY
    IFILE_DATE[3,IN_FNAME]  = TEMP.DOY
    IFILE_DATE[4,IN_FNAME]  = TEMP.DYEAR
    
;----------------------------------
; ADD DATE INFORMATION TO DB_DATA

    DB_DATA.YEAR[IN_FNAME]  = IFILE_DATE[0,IN_FNAME]
    DB_DATA.MONTH[IN_FNAME] = IFILE_DATE[1,IN_FNAME]
    DB_DATA.DAY[IN_FNAME]   = IFILE_DATE[2,IN_FNAME]
    DB_DATA.DOY[IN_FNAME]   = IFILE_DATE[3,IN_FNAME]
    DB_DATA.DECIMAL_YEAR[IN_FNAME] = IFILE_DATE[4,IN_FNAME]
	
;----------------------------------
; RETRIEVE INPUT FILE GEOLOCATION

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING GEOLOCATION INFORMATION'
		IFILE_GEO = GET_MODISA_LAT_LON(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    
;----------------------------------
; RETRIEVE INPUT FILE L1B RADIANCE 

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING REFLECTANCE INFORMATION'
    TOA_REF_1KM = GET_MODISA_L1B_REFLECTANCE(IFILES[IN_FNAME],0,/RES_1KM,VERBOSE=VERBOSE)
    
;------------------------------------------
; RETRIEVE INDEX OF NOMINAL DATA WITHIN ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING INDEX OF PIXELS WITHIN ROI'
		ROI_INDEX = WHERE($
			  	IFILE_GEO.LAT LT ICOORDS[0] AND $
			  	IFILE_GEO.LAT GT ICOORDS[1] AND $
			  	IFILE_GEO.LON LT ICOORDS[2] AND $
			  	IFILE_GEO.LON gT ICOORDS[3] AND $
			  	TOA_REF_1KM[*,*,0] GT 0.0  , $
			  	NB_PIX $
			  	)
	    	
	  DB_DATA.NUM_ROI_PX[IN_FNAME] = NB_PIX	

;-----------------------------------------
; SET INITIAL VALUES OF CLOUD SCREENING

    DB_DATA.AUTO_CS[IN_FNAME] = -1
    DB_DATA.MANUAL_CS[IN_FNAME] = -1

;-----------------------------------------
; IF NUMBER OF PIXELS IN ROI LESS THAN 
; DEFINED THRESHOLD THEN DO NOT RETRIEVE 
; TOA REFLECTANCE

		IF ROI_INDEX[0] lt 50 THEN BEGIN
		  DB_DATA.NUM_ROI_PX[IN_FNAME] = -1
      IFILE_VIEW[*,IN_FNAME]= BADVAL
      IFILE_AUX[*,IN_FNAME] = BADVAL
      ROI_AVG_TOA_REF(*,IN_FNAME) = BADVAL
      ROI_STD_TOA_REF(*,IN_FNAME) = BADVAL
		GOTO, NO_ROI
		ENDIF
		
		GOOD_RECORD[IN_FNAME]=1

;------------------------------------------
; DEFINE ARRAY TO HOLD CS RHO

    CS_RHO = FLTARR(NB_PIX,NB_BANDS+1)

;------------------------------------------
; RETRIEVE VIEWING GEOMETRIES

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: RETRIEVING VIEWING GEOMETRIES'
    TEMP = GET_MODISA_VIEWING_GEOMETRIES(IFILES[IN_FNAME],VERBOSE=VERBOSE)
    TEMP_ANGLES = DIMITRI_ANGLE_CORRECTOR(TEMP.VZA,TEMP.VAA,TEMP.SZA,TEMP.SAA,VERBOSE=VERBOSE)
        
    IFILE_VIEW[0,IN_FNAME]=MEAN(TEMP_ANGLES.VZA[ROI_INDEX])
    IFILE_VIEW[1,IN_FNAME]=MEAN(TEMP_ANGLES.VAA[ROI_INDEX])
    IFILE_VIEW[2,IN_FNAME]=MEAN(TEMP_ANGLES.SZA[ROI_INDEX])
    IFILE_VIEW[3,IN_FNAME]=MEAN(TEMP_ANGLES.SAA[ROI_INDEX])
    TEMP_SZA = TEMP_ANGLES.SZA
    
    TEMP=0
    TEMP_ANGLES=0

;----------------------------------------
; SET AUX INFORMATION AS MISSING

    IFILE_AUX[*,IN_FNAME] = BADVAL

;---------------------------------------
; AVERAGE 1KM TOA_REF OVER ROI
    
    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 1KM REFLECTANCES'
    FOR IN_BAND=0,NB_BANDS_1KM-1 DO BEGIN
      TOA_REF_TEMP = GET_MODISA_L1B_REFLECTANCE(IFILES[IN_FNAME],IN_BAND,/RES_1KM)
      TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)
   
      VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 5.0,COUNTV)
      IF COUNTV EQ 0 THEN CONTINUE
      NON_VALID = WHERE(TOA_REF_TEMP(ROI_INDEX) LT 0.0 OR TOA_REF_TEMP(ROI_INDEX) GE 5.0,COUNTN)
      IF COUNTN GT 0 THEN TOA_REF_TEMP(ROI_INDEX[NON_VALID]) = MEAN(TOA_REF_TEMP(ROI_INDEX[VALID]))
   
      CS_RHO[*,IN_BAND] = TOA_REF_TEMP(ROI_INDEX)
      ROI_AVG_TOA_REF(IN_BAND,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[valid]))
      ROI_STD_TOA_REF(IN_BAND,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[valid]))
    ENDFOR
 
;---------------------------------------
; AVERAGE 500M TOA_REF OVER ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 500M REFLECTANCES'
    
    FOR IN_BAND=0,NB_BANDS_500-1 DO BEGIN
      TOA_REF_TEMP = GET_MODISA_L1B_REFLECTANCE(IFILES[IN_FNAME],IN_BAND,/RES_500M)
      TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)
     
      VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 5.0,COUNTV)
      IF COUNTV EQ 0 THEN CONTINUE
      NON_VALID = WHERE(TOA_REF_TEMP(ROI_INDEX) LT 0.0 OR TOA_REF_TEMP(ROI_INDEX) GE 5.0,COUNTN)
      IF COUNTN GT 0 THEN TOA_REF_TEMP(ROI_INDEX[NON_VALID]) = MEAN(TOA_REF_TEMP(ROI_INDEX[VALID]))
            
      CS_RHO[*,NB_BANDS_1KM+IN_BAND] = TOA_REF_TEMP(ROI_INDEX)
      ROI_AVG_TOA_REF(IN_BAND+NB_BANDS_1KM,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[valid]))
      ROI_STD_TOA_REF(IN_BAND+NB_BANDS_1KM,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[valid]))
    ENDFOR 
 
;---------------------------------------
; AVERAGE 250M TOA_REF OVER ROI

    IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AVERAGING 250M REFLECTANCES'
    
    FOR IN_BAND=0,NB_BANDS_250-1 DO BEGIN
      TOA_REF_TEMP = GET_MODISA_L1B_REFLECTANCE(IFILES[IN_FNAME],IN_BAND,/RES_250M)
      TOA_REF_TEMP = TOA_REF_TEMP/COS(TEMP_SZA*!DTOR)

      VALID     = WHERE(TOA_REF_TEMP(ROI_INDEX) GT 0.0 AND TOA_REF_TEMP(ROI_INDEX) LT 5.0,COUNTV)
      IF COUNTV EQ 0 THEN CONTINUE
      NON_VALID = WHERE(TOA_REF_TEMP(ROI_INDEX) LT 0.0 OR TOA_REF_TEMP(ROI_INDEX) GE 5.0,COUNTN)
      IF COUNTN GT 0 THEN TOA_REF_TEMP(ROI_INDEX[NON_VALID]) = MEAN(TOA_REF_TEMP(ROI_INDEX[VALID]))

      CS_RHO[*,NB_BANDS_1KM+NB_BANDS_500+IN_BAND] = TOA_REF_TEMP(ROI_INDEX)
      ROI_AVG_TOA_REF(IN_BAND+NB_BANDS_1KM+NB_BANDS_500,IN_FNAME) = MEAN(TOA_REF_TEMP(ROI_INDEX[valid]))
      ROI_STD_TOA_REF(IN_BAND+NB_BANDS_1KM+NB_BANDS_500,IN_FNAME) = STDDEV(TOA_REF_TEMP(ROI_INDEX[valid]))
    ENDFOR 

;---------------------------------- 
; GET ADDITIONAL 12 MICRON BAND
    
    TEMP_REF            = GET_MODISA_L1B_EMISSIVE(IFILES[IN_FNAME],11)
    TEMP_BTEMP          = CONVERT_EMISSIVE_TO_BTEMP(TEMP_REF(ROI_INDEX),11)
    CS_RHO[*,NB_BANDS]  = TEMP_BTEMP

;----------------------------------
; APPLY CLOUD SCREENING

    CS_MODISA = DIMITRI_CLOUD_SCREENING(SENSOR,AQA_SITE_TYPE,CS_RHO,0,'LCCA',VERBOSE=VERBOSE)
    IF CS_MODISA[0] GT -1.0 THEN DB_DATA.AUTO_CS[IN_FNAME] = DOUBLE(CS_MODISA[0])
  
	NO_ROI:; IF ROI IS NOT WITHIN THE PRODUCT OR THERE ARE TOO FEW PIXELS
	IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: END OF LOOP ON PRODUCT'
	ENDFOR; END OF FILE ANALYSIS

;------------------------------------
; AMEND/SAVE DATA TO SAV FILE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: DEFINING OUTPUT ARRAY'
  NUM_NON_REFS = 5+12
  NB_COLS = NUM_NON_REFS+2*(NB_BANDS)
	SENSOR_L1B_REF          = DBLARR(NB_COLS,NB_FILES)
	IF NB_FILES EQ 1 THEN SENSOR_L1B_REF = REFORM(SENSOR_L1B_REF,NB_COLS,NB_FILES)
  SENSOR_L1B_REF[0,*]     = IFILE_DATE[4,*]
  SENSOR_L1B_REF[1:4,*]   = IFILE_VIEW[*,*]
  SENSOR_L1B_REF[5:16,*]  = IFILE_AUX[*,*]
  SENSOR_L1B_REF[NUM_NON_REFS:NUM_NON_REFS+NB_BANDS-1,*]  = ROI_AVG_TOA_REF[*,*] 
  SENSOR_L1B_REF[NUM_NON_REFS+NB_BANDS:NB_COLS-1,*] = ROI_STD_TOA_REF[*,*] 

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: AMMENDING DATA TO OUTPUT SAV FILE'
	TEMP = FILE_INFO(OUTPUT_SAV)
	IF TEMP.EXISTS EQ 1 THEN BEGIN
	 TEMP_NEW = SENSOR_L1B_REF
   IF N_ELEMENTS(TEMP_NEW) EQ NB_COLS THEN TEMP_NEW = REFORM(TEMP_NEW,NB_COLS,NB_FILES)
   RESTORE,OUTPUT_SAV
   TEMP_OLD = SENSOR_L1B_REF
   IF N_ELEMENTS(TEMP_OLD) EQ NB_COLS THEN TEMP_OLD = REFORM(TEMP_OLD,NB_COLS,NB_FILES)
   RES_DIMS = SIZE(TEMP_OLD)
   
   SENSOR_L1B_REF = MAKE_ARRAY(NB_COLS,RES_DIMS[2]+NB_FILES,/DOUBLE)
   SENSOR_L1B_REF[*,0:RES_DIMS[2]-1] = TEMP_OLD
   SENSOR_L1B_REF[*,RES_DIMS[2]:RES_DIMS[2]+NB_FILES-1] = TEMP_NEW
  
	ENDIF
	
	RES = SORT(SENSOR_L1B_REF[0,*])
  SENSOR_L1B_REF = SENSOR_L1B_REF[*,RES]
	SAVE,SENSOR_L1B_REF,FILENAME=OUTPUT_SAV

;------------------------------------
; GENERATE PLOTS WITH NEW TIME SERIES DATA

  RES = GET_MODISA_TIMESERIES_PLOTS(OUTPUT_SAV,COLOUR_TABLE=COLOUR_TABLE,PLOT_XSIZE=PLOT_XSIZE,PLOT_YSIZE=PLOT_YSIZE,VERBOSE=VERBOSE) 

;------------------------------------
; AMEND DATA TO DATABASE

  IF KEYWORD_SET(VERBOSE) THEN PRINT, 'MODISA L1B INGEST: SENDING DATA TO UPDATE DATABASE'
  RES = UPDATE_DIMITRI_DATABASE(DB_DATA,/SORT_DB,VERBOSE=VERBOSE)
 
	RETURN,1 
END
