;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      RECALIBRATE_DOUBLETS       
;* 
;* PURPOSE:
;*      RECALIBRATES EXTRACTED DOUBLET DATA USING THE COMPUTED INTERCALIBRATION COEFICIENTS.
;*      THE ROUTINE AUTOMATICALLY RECALIBRATES ALL AVAILABLE BAND DATA WITHIN THE CAL_SENSOR.
;* 
;* CALLING SEQUENCE:
;*      RES = RECALIBRATE_DOUBLETS(OUTPUT_FOLDER,RC_REGION,REF_SENSOR,REF_PROC_VER,$
;*                                 CAL_SENSOR,CAL_PROC_VER)      
;* 
;* INPUTS:
;*      OUTPUT_FOLDER   - THE FULL PATH OF THE OUTPUT FOLDER  
;*      RC_REGION       - THE VALIDATION SITE NAME E.G. 'Uyuni'
;*      REF_SENSOR      - THE NAME OF THE REFERENCE SENSOR FOR INTERCALIBRATION
;*      REF_PROC_VER    - THE PROCESSING VERISON OF THE REFERENCE SENSOR
;*      CAL_SENSOR      - THE NAME OF THE 2ND SENSOR FOR INTERCALIBRATION
;*      CAL_PROC_VER    - THE PROCESSING VERISON OF THE 2ND SENSOR
;*
;* KEYWORDS:
;*      VERBOSE         - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS          - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION 
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*                    - M BOUVET  - PROTOTYPE DIMITRI VERSION
;*        21 JAN 2011 - C KENT    - DIMITRI-2 V1.0
;*
;* VALIDATION HISTORY:
;*        21 JAN 2011 - C KENT    - 
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION RECALIBRATE_DOUBLETS,OUTPUT_FOLDER,RC_REGION,REF_SENSOR,REF_PROC_VER,$
                              CAL_SENSOR,CAL_PROC_VER,VERBOSE=VERBOSE

;----------------------------------------- 
; CHECK INPUT SENSORS AND PROC_VERSIONS 

  IF STRCMP(REF_SENSOR,CAL_SENSOR) EQ 1 AND $
     STRCMP(REF_PROC_VER,CAL_PROC_VER) EQ 1 THEN BEGIN
    PRINT, 'RECALIBRATE_DATA: ERROR, TRYING TO COMPARE THE SAME DATA'
    RETURN,0     
  ENDIF
  
;-----------------------------------------
; CHECK OFOLDER EXISTS AND IS CORRECT FORMAT
  
  RES = FILE_INFO(OUTPUT_FOLDER)
  IF RES.EXISTS EQ 0 THEN BEGIN
    PRINT,"RECALIBRATE_DATA: OUTPUT FOLDER DOESN'T EXIST"
    RETURN,-1
  ENDIF
  
  RES = STRSPLIT(OUTPUT_FOLDER,'\',/EXTRACT)
  IF N_ELEMENTS(RES) EQ 1 THEN DL = '/' ELSE DL = '\' 

;-----------------------------------------
; GET THE CURRENT LOCATION

  CD, CURRENT=RC_CDIR
  RES = STRPOS(RC_CDIR,'DIMITRI_',/REVERSE_SEARCH)
  IF RES EQ -1 THEN BEGIN
    PRINT, 'RECALIBRATE_DATA: ERROR, CANNOT DETERMINE DIMITRI LOCATION, RETURNING'
    RETURN,-1
  ENDIF

;-----------------------------------------
; DEFINE INPUT/OUTPUT FILES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RECALIBRATE_DATA: DEFINING INPUT/OUTPUT FILES'
  MAIN_DIRC     = STRMID(RC_CDIR,0,RES+11)+DL 
  ED_FOLDER     = STRING(OUTPUT_FOLDER+DL+'DOUBLET_EXTRACTION'+DL)
  IC_FOLDER     = STRING(OUTPUT_FOLDER+DL+'INTERCALIBRATION'+DL)
  RC_FOLDER     = STRING(OUTPUT_FOLDER+DL+'RECALIBRATION'+DL)
  REF_IFILE     = STRING(MAIN_DIRC+'Input'+DL+'Site_'+RC_REGION+DL+REF_SENSOR+DL+'Proc_'+REF_PROC_VER+DL+REF_SENSOR+'_TOA_REF.dat')
  TMP_IFILE     = STRING(IC_FOLDER+       'ICOEF_'+    RC_REGION+'_'+CAL_SENSOR+'_'+CAL_PROC_VER+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'_')
  CSV_FILE      = STRING(OUTPUT_FOLDER+DL+'RCAL_' +    RC_REGION+'_'+CAL_SENSOR+'_'+CAL_PROC_VER+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.csv')  
  ED_REFS_CALS  = STRING(ED_FOLDER+       'ED_'+       RC_REGION+'_'+REF_SENSOR+'_'+REF_PROC_VER+'_'+    CAL_SENSOR+'_'+CAL_PROC_VER+'.dat')
  ED_CALS_REFS  = STRING(ED_FOLDER+       'ED_'+       RC_REGION+'_'+CAL_SENSOR+'_'+CAL_PROC_VER+'_'+    REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  OFILE_CAL     = STRING(RC_FOLDER+       'RECAL_'+    RC_REGION+'_'+CAL_SENSOR+'_'+CAL_PROC_VER+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  OFILE_REF     = STRING(RC_FOLDER+       'RECAL_REF_'+RC_REGION+'_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  
;-----------------------------------------
; CREATE RECALIBRATION FOLDER IF IT 
; DOESN'T EXIST

  RES = FILE_INFO(RC_FOLDER)
  IF RES.EXISTS NE 1 OR RES.DIRECTORY NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"RECALIBRATE_DATA: RECALIBRATION FOLDER DOESN'T EXIST, CREATING"
    FILE_MKDIR,RC_FOLDER 
  ENDIF
  
;-----------------------------------------
; DEFINE SENSOR AND PROC_VERSION ARRAYS

  SENS = [REF_SENSOR,CAL_SENSOR,CAL_SENSOR]
  PVER = [REF_PROC_VER,CAL_PROC_VER,CAL_PROC_VER]  

;-----------------------------------------    
; RESTORE AND STORE DOUBLET EXTRACTIONS 
; SENSORS IN NEW ARRAYS (SETTING ALL 
; CAL_REFLECTANCES TO 0.0)
  
  RES = FILE_INFO(ED_REFS_CALS)
  RES2 = FILE_INFO(ED_CALS_REFS)  
  IF RES.EXISTS   EQ 0 OR $
     RES2.EXISTS  EQ 0 THEN BEGIN
    PRINT,"RECALIBRATE_DATA: DOUBLET EXTRACTION DATA NOT FOUND"
    RETURN,0
  ENDIF  

  NUM_NON_REF = 5
  RESTORE,ED_REFS_CALS
  RESTORE,ED_CALS_REFS 
  CAL_DATA = ED_SENSOR2_SENSOR1
  CAL_DATA[NUM_NON_REF:N_ELEMENTS(CAL_DATA[*,0])-2,*] = 0.0

;----------------------------------------- 
; GET NUMBER OF BANDS WITHIN CAL_SENSOR 
; AND REF_SENSOR

  SIZE_CAL    = SIZE(CAL_DATA)
  SIZE_REF    = SIZE(ED_SENSOR1_SENSOR2)
  NBANDS_CAL  = (SIZE_CAL[1]-1-NUM_NON_REF)
  NBANDS_REF  = (SIZE_REF[1]-1-NUM_NON_REF)
  CAL_COUNTER = 0

;-----------------------------------------
; LOOP OVER EACH CAL_SENSOR BAND AND 
; RECALIBRATE IF COEFICIENTS COMPUTED
 
  FOR RC_BAND=0,NBANDS_CAL-1 DO BEGIN

;-----------------------------------------  
; GET DIMITRI WAVELENGTH STRING AND 
; FIND CALIBRATION COEFICIENTS

    TEMP = CONVERT_INDEX_TO_WAVELENGTH(RC_BAND,CAL_SENSOR,/VERBOSE)
    TEMP = STRING(TMP_IFILE+TEMP+'.dat')
    RES  = FILE_INFO(TEMP)
    IF RES.EXISTS EQ 0 THEN BEGIN
      PRINT, 'RECALIBRATE_DATA: NO CALIBRATION COEFICIENTS FOUND, GOING TO NEXT BAND'
      GOTO,NEXT_BAND
    ENDIF

;----------------------------------------- 
; RESTORE CALIBRAITON COEFICIENTS AND APPLY

    RESTORE,TEMP
    BIAS                              = POLY_COEFS[0]+ED_SENSOR2_SENSOR1[0,*]*POLY_COEFS[1]+ $
                                        (ED_SENSOR2_SENSOR1[0,*])^2*POLY_COEFS[2]
    CAL_DATA[NUM_NON_REF+RC_BAND,*]  = ED_SENSOR2_SENSOR1[NUM_NON_REF+RC_BAND, *]*(1.0-BIAS/100.0)
    CAL_COUNTER++
    NEXT_BAND:
  ENDFOR
  
  IF CAL_COUNTER EQ 0 THEN BEGIN
    PRINT, 'RECALIBRATE_DATA: ERROR, NO INTERCAL COEFICIENTS FOUND'
    RETURN,0
  ENDIF

;---------------------------------------- 
;RESTORE REF DATA AND SAVE THE REFLECTANCE DATA AS SAV FILES

  RESTORE,REF_IFILE
  ;SAVE,CAL_DATA,          FILENAME=OFILE_CAL
  ;SAVE,SENSOR_L1B_REF,    FILENAME=OFILE_REF
  SAVE,ED_SENSOR1_SENSOR2,    FILENAME=OFILE_REF
;---------------------------------------- 
; CREATE AN OUTPUT CSV FILE CONTAINING ALL DATA 
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RECALIBRATE_DATA: SAVING DATA AS A CSV FILE'
  NTIME = N_ELEMENTS(ED_SENSOR1_SENSOR2[0,*])
  HEADER = ['REGION','SENSOR','PROCESSING_VERSION','PARAMETER']
  TMP_HD = ['TIME','VZA','VAA','SZA','SAA']
  FORMAT = STRING('(4(A,1H;),'+STRTRIM(STRING(NTIME-1),2)+'(F15.6,1H;),(F15.6))')
  OPENW,OUTF,CSV_FILE,/GET_LUN
  PRINTF,OUTF,FORMAT=FORMAT,HEADER,ED_SENSOR1_SENSOR2[0,*]

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RECALIBRATE_DATA: STARTING LOOP TO OUTPUT SENSOR DATA TO CSV'  
  FOR RCS=0,2 DO BEGIN
    
    CASE RCS OF
    0:BEGIN
        DATA = ED_SENSOR1_SENSOR2  
        TMP_BANDS = NBANDS_REF
      END
    1:BEGIN
        DATA = ED_SENSOR2_SENSOR1  
        TMP_BANDS = NBANDS_CAL
      END
    2:BEGIN
        DATA = CAL_DATA
        TMP_BANDS = NBANDS_CAL
      END
    ENDCASE
      
    COUNTER = 0
    FOR RCB=1,TMP_BANDS+NUM_NON_REF-1 DO BEGIN
      IF RCB LE 4 THEN BEGIN
        IF RCS EQ 2 THEN PRINTF,OUTF,FORMAT=FORMAT,RC_REGION,SENS[RCS],PVER[RCS],STRING('RECAL_'+TMP_HD[RCB]),DATA[RCB,*] $
        ELSE PRINTF,OUTF,FORMAT=FORMAT,RC_REGION,SENS[RCS],PVER[RCS],TMP_HD[RCB],DATA[RCB,*]
      ENDIF ELSE BEGIN
        IF RCS EQ 2 THEN PRINTF,OUTF,FORMAT=FORMAT,RC_REGION,SENS[RCS],PVER[RCS],'RECAL_TOA_BAND_'+STRTRIM(STRING(COUNTER),2),DATA[NUM_NON_REF+COUNTER,*] $
        ELSE PRINTF,OUTF,FORMAT=FORMAT,RC_REGION,SENS[RCS],PVER[RCS],'TOA_BAND_'+STRTRIM(STRING(COUNTER),2),DATA[NUM_NON_REF+COUNTER,*]
        COUNTER++   
      ENDELSE
    ENDFOR
  ENDFOR

  IF KEYWORD_SET(VERBOSE) THEN PRINT,'RECALIBRATE_DATA: SUCCESSFULLY RECALIBRATED DATA'  
  FREE_LUN,OUTF
  RETURN,1

END