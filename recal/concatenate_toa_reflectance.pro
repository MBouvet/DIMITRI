;**************************************************************************************
;**************************************************************************************
;*
;* NAME:
;*      CONCATENATE_TOA_REFLECTANCE       
;* 
;* PURPOSE:
;*      CONCATENATES REFERENCE SENSOR DATA WITH RECALIBRATED SENSOR DATA INTO INDIVIDUAL 
;*      BAND SAVE FILES.
;* 
;* CALLING SEQUENCE:
;*      RES = CONCATENATE_TOA_REFLECTANCE(OFOLDER,SS_REGION,REF_SENSOR,REF_PROC_VER)      
;* 
;* INPUTS:
;*      OFOLDER         - THE FULL PATH OF THE OUTPUT FOLDER  
;*      SS_REGION       - THE VALIDATION SITE NAME E.G. 'UYUNI'
;*      REF_SENSOR      - THE NAME OF THE REFERENCE SENSOR FOR RECALIBRATION
;*      REF_PROC_VER    - THE PROCESSING VERSION OF THE REFERENCE SENSOR
;*
;* KEYWORDS:
;*      VERBOSE         - PROCESSING STATUS OUTPUTS
;*
;* OUTPUTS:
;*      STATUS          - 1: NO ERRORS REPORTED, (-1) OR 0: ERRORS DURING INGESTION 
;*
;* COMMON BLOCKS:
;*      NONE
;*
;* MODIFICATION HISTORY:
;*        26 APR 2011 - C KENT    - DIMITRI-2 V1.0
;*        04 JUL 2011 - C KENT    - UPDATED SAV FILES TO INCLUDE AUX DATA
;*        05 JUL 2011 - C KENT    - ADDED MODISA SURFACE DEPENDANCE
;*
;* VALIDATION HISTORY:
;*        13 APR 2011 - C KENT    -  
;*
;**************************************************************************************
;**************************************************************************************

FUNCTION CONCATENATE_TOA_REFLECTANCE,OFOLDER,SS_REGION,REF_SENSOR,REF_PROC_VER,VERBOSE=VERBOSE

;-----------------------------------------
; CHECK OFOLDER EXISTS 
  
  RES = FILE_INFO(OFOLDER)
  IF RES.EXISTS EQ 0 THEN BEGIN
    PRINT,"CONCATENATE_TOA_REFLECTANCE: OUTPUT FOLDER DOESN'T EXIST"
    RETURN,-1
  ENDIF

;--------------------------------  
; DEFINE I/O FILES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: DEFINING I/O FILES"
  DL            = GET_DIMITRI_LOCATION('DL')
  CFIG_DATA     = GET_DIMITRI_CONFIGURATION()
  RC_FOLDER     = STRING(OFOLDER+DL+'RECALIBRATION'+DL)
  REF_DATA      = STRING(RC_FOLDER +'RECAL_REF_' +SS_REGION+'_'+    REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  RCB_DATA      = STRING(RC_FOLDER +'RECAL_'     +SS_REGION+'*REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.dat')
  SSEN_DATA     = STRING(RC_FOLDER +'SSEN_'      +SS_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'_')
  CSV_FILE      = STRING(OFOLDER+DL+'SSEN_'      +SS_REGION+'_REF_'+REF_SENSOR+'_'+REF_PROC_VER+'.csv')
  RCB_UCT_XT    = '_UCERT.dat' 

  RES = FILE_INFO(REF_DATA)
  IF RES.EXISTS NE 1 THEN BEGIN
    IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: INPUT FILE DOESN'T EXIST"
    RETURN,0 
  ENDIF
  RESTORE,REF_DATA

;-----------------------------------------
; RETRIEVE THE SITE TYPE

  SITE_TYPE = GET_SITE_TYPE(SS_REGION,VERBOSE=VERBOSE) 

;--------------------------------   
; RESTORE REFERENCE DATA UNCERTAINTY
  
  TEMP_IFILE = STRMID(REF_DATA,0,STRLEN(REF_DATA)-4)+RCB_UCT_XT
  RESTORE,TEMP_IFILE

;--------------------------------
; SEARCH FOR RECALIBRATED DATA 
; FROM OTHER SENSORS

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: SEARCHING FOR RECALIBRATED DATA"
  RC_FILES = FILE_SEARCH(RCB_DATA)
  IF STRCMP(RC_FILES[0],'') THEN BEGIN
    PRINT,'CONCATENATE_TOA_REFLECTANCE: ERROR, ONLY REF SENSOR DATA FOUND'
    RETURN,0
  ENDIF
  RC_SENSORS = STRARR(N_ELEMENTS(RC_FILES))
  RC_CONFIG = RC_SENSORS

;--------------------------------
; GET ARRAY OF ALL RECAL SENSOR NAMES

  IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: GETTING LIST OF SENSOR NAMES"
  FOR IDX=0,N_ELEMENTS(RC_FILES)-1 DO BEGIN
    TEMP = STRSPLIT(RC_FILES[IDX],'_',/EXTRACT)
    TMP = WHERE(STRCMP(TEMP,SS_REGION) EQ 1)
    TMP2= WHERE(STRCMP(TEMP,'REF') EQ 1)
    IF TMP[0] EQ -1 or TMP2[0] EQ -1 THEN BEGIN
      PRINT,'CONCATENATE_TOA_REFLECTANCE: ERROR, ONLY REF SENSOR DATA FOUND' 
      RETURN,0
    ENDIF
    RC_SENSORS[IDX] = TEMP[TMP[N_ELEMENTS(TMP)-1]+1]
    RC_CONFIG[IDX]  = STRJOIN( TEMP[TMP[N_ELEMENTS(TMP)-1]+1:TMP2[N_ELEMENTS(TMP2)-1]+1],'_')
  ENDFOR

;--------------------------------
; GET NUMBER OF BANDS IN REF SENSOR

  SENSOR_L1B_REF = GD_REF_DATA
  NUM_NO_REFS = 5+12 ;(TIME, ANGLES (4) AND AUX INFO (12)
  REF_SIZE = SIZE(SENSOR_L1B_REF)
  NB_BANDS_REF = FIX((REF_SIZE[1]-NUM_NO_REFS)/2.0)

;------------------------------------------------
; SETUP WINDOW PROPERTIES

  MACHINE_WINDOW = !D.NAME
  YMIN = 0.
  YMAX = 1.
  SET_PLOT, 'Z'
  DEVICE, SET_RESOLUTION=[CFIG_DATA.(1)[0],CFIG_DATA.(1)[1]],SET_PIXEL_DEPTH=24
  DEVICE, DECOMPOSED = 0
  ERASE  
  LOADCT, 39

;-----------------------------------------
; MODISA SURFACE DEPENDANCE EXCEPTION

      IF REF_SENSOR EQ 'MODISA' THEN BEGIN
        IF STRUPCASE(SITE_TYPE) EQ 'OCEAN' THEN TREF_SENSOR = REF_SENSOR+'_O' ELSE TREF_SENSOR = REF_SENSOR+'_L'
      ENDIF ELSE TREF_SENSOR = REF_SENSOR

;--------------------------------
; LOOP OVER EACH BAND IN REF SENSOR
  
  IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: STARTING LOOP OVER EACH REFERENCE SENSOR BAND"  
  FOR RB_BAND=0,NB_BANDS_REF-1 DO BEGIN
  
    TEMP        = WHERE(SENSOR_L1B_REF[NUM_NO_REFS+RB_BAND,*] GT 0.0 and SENSOR_L1B_REF[NUM_NO_REFS+RB_BAND,*] lT 5.0)
    IF TEMP[0] EQ -1 THEN GOTO, NEXT_BAND
    SS_DATES  = REFORM(SENSOR_L1B_REF[0,TEMP]  ,N_ELEMENTS(TEMP))
    SS_VZA    = REFORM(SENSOR_L1B_REF[1,TEMP]  ,N_ELEMENTS(TEMP))
    SS_VAA    = REFORM(SENSOR_L1B_REF[2,TEMP]  ,N_ELEMENTS(TEMP))
    SS_SZA    = REFORM(SENSOR_L1B_REF[3,TEMP]  ,N_ELEMENTS(TEMP)) 
    SS_SAA    = REFORM(SENSOR_L1B_REF[4,TEMP]  ,N_ELEMENTS(TEMP))  
    
    SS_OZM    = REFORM(SENSOR_L1B_REF[5,TEMP]  ,N_ELEMENTS(TEMP))
    SS_OZS    = REFORM(SENSOR_L1B_REF[6,TEMP]  ,N_ELEMENTS(TEMP))
    SS_PSM    = REFORM(SENSOR_L1B_REF[7,TEMP]  ,N_ELEMENTS(TEMP))
    SS_PSS    = REFORM(SENSOR_L1B_REF[8,TEMP]  ,N_ELEMENTS(TEMP))
    SS_RHM    = REFORM(SENSOR_L1B_REF[9,TEMP]  ,N_ELEMENTS(TEMP))
    SS_RHS    = REFORM(SENSOR_L1B_REF[10,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WZM    = REFORM(SENSOR_L1B_REF[11,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WZS    = REFORM(SENSOR_L1B_REF[12,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WMM    = REFORM(SENSOR_L1B_REF[13,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WMS    = REFORM(SENSOR_L1B_REF[14,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WVM    = REFORM(SENSOR_L1B_REF[15,TEMP]  ,N_ELEMENTS(TEMP))
    SS_WVS    = REFORM(SENSOR_L1B_REF[16,TEMP]  ,N_ELEMENTS(TEMP))
    
    SS_TOAREF = REFORM(SENSOR_L1B_REF[NUM_NO_REFS+RB_BAND,TEMP],N_ELEMENTS(TEMP))
    SS_UCTS   = REBIN([REF_DATA_UCT[1,RB_BAND]],N_ELEMENTS(TEMP)) 
    SS_UCTR   = REBIN([REF_DATA_UCT[2,RB_BAND]],N_ELEMENTS(TEMP))
    SS_UCTP   = REBIN([REF_DATA_UCT[3,RB_BAND]],N_ELEMENTS(TEMP))
    SS_CFIG   = MAKE_ARRAY(N_ELEMENTS(TEMP),/DOUBLE,VALUE=0)
    TEMP_BID  = CONVERT_INDEX_TO_WAVELENGTH(RB_BAND,TREF_SENSOR)

;--------------------------------
; LOOP OVER OTHER SENSOR DATA AND 
; CONCATENATE TO REF_DATA

    IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: STARTING LOOP OVER EACH RECALIBRATED SENSOR" 
    FOR RB_CAL=0,N_ELEMENTS(RC_SENSORS)-1 DO BEGIN
      TEMP_BANDS = SENSOR_BAND_INFO(RC_SENSORS[RB_CAL])

;-----------------------------------------
; MODISA SURFACE DEPENDANCE EXCEPTION

      IF RC_SENSORS[RB_CAL] EQ 'MODISA' THEN BEGIN
        IF STRUPCASE(SITE_TYPE) EQ 'OCEAN' THEN TEMP_SENSOR = RC_SENSORS[RB_CAL]+'_O' ELSE TEMP_SENSOR = RC_SENSORS[RB_CAL]+'_L'
      ENDIF ELSE TEMP_SENSOR = RC_SENSORS[RB_CAL]

;--------------------------------
; FIND OUT WHICH BAND IT CORRESPONDS TO

      IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: STARTING LOOP TO FIND CORRESPONDING BAND DATA"       
      FOR BMATCH=0,TEMP_BANDS[0]-1 DO BEGIN
                
        TEMP_BID2 = CONVERT_INDEX_TO_WAVELENGTH(BMATCH,TEMP_SENSOR)
        IF STRCMP(TEMP_BID,TEMP_BID2) EQ 1 THEN GOTO, BAND_MATCH
      ENDFOR
      GOTO, NEXT_SENSOR
      BAND_MATCH:

;--------------------------------
; RESTORE THE DATA

      IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: RESTORING RECALIBRATED DATA" 
      RESTORE,RC_FILES[RB_CAL]
      TMP = WHERE(CAL_DATA[NUM_NO_REFS+BMATCH,*] GT 0.0); and CAL_DATA[NUM_NO_REFS+BMATCH,*] lT 5.0)

;--------------------------------      
; RESTORE THE UNCERTATINTY ARRAY
      
      TEMP_IFILE = STRMID(RC_FILES[RB_CAL],0,STRLEN(RC_FILES[RB_CAL])-4)+RCB_UCT_XT
      RESTORE,TEMP_IFILE

      IF TMP[0] GT -1 THEN BEGIN
      IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: APPENDING DATA TO GEOMETRIES AND REFLECTANCE ARRAYS"
        SS_DATES  = [SS_DATES, REFORM(CAL_DATA[0,TMP],  N_ELEMENTS(TMP))]
        SS_VZA    = [SS_VZA,   REFORM(CAL_DATA[1,TMP],  N_ELEMENTS(TMP))]  
        SS_VAA    = [SS_VAA,   REFORM(CAL_DATA[2,TMP],  N_ELEMENTS(TMP))] 
        SS_SZA    = [SS_SZA,   REFORM(CAL_DATA[3,TMP],  N_ELEMENTS(TMP))]  
        SS_SAA    = [SS_SAA,   REFORM(CAL_DATA[4,TMP],  N_ELEMENTS(TMP))]   

        SS_OZM    = [SS_OZM,   REFORM(CAL_DATA[5,TMP]  ,N_ELEMENTS(TMP))]
        SS_OZS    = [SS_OZS,   REFORM(CAL_DATA[6,TMP]  ,N_ELEMENTS(TMP))]
        SS_PSM    = [SS_PSM,   REFORM(CAL_DATA[7,TMP]  ,N_ELEMENTS(TMP))]
        SS_PSS    = [SS_PSS,   REFORM(CAL_DATA[8,TMP]  ,N_ELEMENTS(TMP))]
        SS_RHM    = [SS_RHM,   REFORM(CAL_DATA[9,TMP]  ,N_ELEMENTS(TMP))]
        SS_RHS    = [SS_RHS,   REFORM(CAL_DATA[10,TMP]  ,N_ELEMENTS(TMP))]
        SS_WZM    = [SS_WZM,   REFORM(CAL_DATA[11,TMP]  ,N_ELEMENTS(TMP))]
        SS_WZS    = [SS_WZS,   REFORM(CAL_DATA[12,TMP]  ,N_ELEMENTS(TMP))]
        SS_WMM    = [SS_WMM,   REFORM(CAL_DATA[13,TMP]  ,N_ELEMENTS(TMP))]
        SS_WMS    = [SS_WMS,   REFORM(CAL_DATA[14,TMP]  ,N_ELEMENTS(TMP))]
        SS_WVM    = [SS_WVM,   REFORM(CAL_DATA[15,TMP]  ,N_ELEMENTS(TMP))]
        SS_WVS    = [SS_WVS,   REFORM(CAL_DATA[16,TMP]  ,N_ELEMENTS(TMP))]

        SS_TOAREF = [SS_TOAREF,REFORM(CAL_DATA[NUM_NO_REFS+BMATCH,TMP],N_ELEMENTS(TMP))]
        SS_UCTS   = [SS_UCTS,  REBIN([RCAL_DATA_UCT[1,BMATCH]],N_ELEMENTS(TMP))]   
        SS_UCTR   = [SS_UCTR,  REBIN([RCAL_DATA_UCT[2,BMATCH]],N_ELEMENTS(TMP))]
        SS_UCTP   = [SS_UCTP,  REBIN([RCAL_DATA_UCT[3,BMATCH]],N_ELEMENTS(TMP))]
        SS_CFIG   = [SS_CFIG,  MAKE_ARRAY(N_ELEMENTS(TMP),/INTEGER,VALUE=RB_CAL+1)] 
      ENDIF
    
      CAL_DATA = 0
      NEXT_SENSOR:
  
    ENDFOR ;LOOP OVER EACH RECALIBRATED SENSOR DATA

;-------------------------------
; STORE BAND DATA IN A SUPER ARRAY

    IF KEYWORD_SET(VERBOSE) THEN PRINT,"CONCATENATE_TOA_REFLECTANCE: SAVING BAND DATA"
    DIMS  = SIZE(SS_DATES)
    IDX   = SORT(SS_DATES)
    
    SS_DATA      = MAKE_ARRAY(NUM_NO_REFS+5,DIMS[1],/DOUBLE,VALUE=-1.0)
    SS_DATA[0,*] = SS_DATES[IDX]
    SS_DATA[1,*] = SS_VZA[IDX]
    SS_DATA[2,*] = SS_VAA[IDX]
    SS_DATA[3,*] = SS_SZA[IDX]
    SS_DATA[4,*] = SS_SAA[IDX]
    
    SS_DATA[5,*] = SS_OZM[IDX]
    SS_DATA[6,*] = SS_OZS[IDX]
    SS_DATA[7,*] = SS_PSM[IDX]
    SS_DATA[8,*] = SS_PSS[IDX]
    SS_DATA[9,*] = SS_RHM[IDX]
    SS_DATA[10,*] = SS_RHS[IDX]
    SS_DATA[11,*] = SS_WZM[IDX]
    SS_DATA[12,*] = SS_WZS[IDX]
    SS_DATA[13,*] = SS_WMM[IDX]
    SS_DATA[14,*] = SS_WMS[IDX]
    SS_DATA[15,*] = SS_WVM[IDX]
    SS_DATA[16,*] = SS_WVS[IDX]
        
    SS_DATA[17,*] = SS_TOAREF[IDX]
    SS_DATA[18,*] = SS_UCTS[IDX]
    SS_DATA[19,*] = SS_UCTR[IDX]
    SS_DATA[20,*] = SS_UCTP[IDX]
    SS_DATA[21,*] = SS_CFIG[IDX]
    SAVE, SS_DATA,FILENAME = SSEN_DATA+TEMP_BID+'.DAT'
 
    PLOT,SS_DATA[0,*],SS_DATA[NUM_NO_REFS,*],/NODATA,$
      COLOR = 0, BACKGROUND = 255,$
      YTITLE = 'SUPER SENSOR TOA REFLECTANCE (DL)',$
      XTITLE = 'DECIMAL YEAR',$
      YRANGE = [YMIN,YMAX],$
      XTICKFORMAT='((F8.3))'
    OPLOT,SS_DATA[0,*],SS_DATA[NUM_NO_REFS,*],COLOR = 20+220.*RB_BAND/NB_BANDS_REF
    TEMP = TVRD(TRUE=1)
    WRITE_JPEG,SSEN_DATA+TEMP_BID+'.JPG',TEMP,TRUE=1,QUALITY=100
    ERASE
     
    NEXT_BAND:
  ENDFOR ;LOOP ON REF SENSOR BANDS
  

  SET_PLOT, MACHINE_WINDOW

;-------------------------------
; RETURN NO PRODUCT ERRORS

  RETURN,1

end